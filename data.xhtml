<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" epub:prefix="z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en" xml:lang="en">
  <head>
    <title>DATA</title>
  </head>
  <body><h1>DATA</h1><h2>OPCODE GUIDE: DATA</h2>
<ul>
<li>
<h3>BUFFER / FUNCTION TABLES</h3>
<p>See the chapter about <a href="http://en.flossmanuals.net/bin/view/Csound/FUNCTIONTABLES">function
tables</a> for more detailed information. <br/></p>
<ul>
<li>
<h4>Creating Function Tables (Buffers)</h4>
<p><a href="http://www.csounds.com/manual/html/ftgen.html"><strong>ftgen</strong></a>
can generates function tables from within the orchestra. The
function table will exist until the end of the current Csound
performance. Different <a href="http://www.csounds.com/manual/html/ScoreGenRef.html">GEN
Routines</a> are used to fill a function table with different kinds
of data. This could be waveforms, sound files, envelopes, window
functions and so on.</p>
</li>
<li>
<h4>Writing To Tables</h4>
<strong><a href="http://www.csounds.com/manual/html/tableiw.html">tableiw</a></strong>
/ <strong><a href="http://www.csounds.com/manual/html/tablew.html">tablew</a></strong>:
Write values to a function table at i-rate (tableiw), k-rate and
a-rate (tablew). These opcodes provide many options and are robust
in use as they check for user error in defining table reading index
values. They may however experience problems with non-power-of-two
table sizes.
<p><strong><a href="http://www.csounds.com/manual/html/tab.html">tabw_i</a></strong> /
<strong><a href="http://www.csounds.com/manual/html/tab.html">tabw</a></strong>:
Write values to a function table at i-rate (tabw_i), k-rate or
a-rate (tabw). These opcodes offer fewer options than tableiw and
tablew but will work consistently with non-power-of-two table
sizes. They do not provide a boundary check on index values given
to them which makes them fast but also then demands user
responsibility in protecting against invalid index values.</p>
</li>
<li>
<h4>Reading From Tables </h4>
<p><strong><a href="http://www.csounds.com/manual/html/table.html">table</a></strong>
/ <strong><a href="http://www.csounds.com/manual/html/tablei.html">tablei</a></strong>
/ <strong><a href="http://www.csounds.com/manual/html/table3.html">table3</a></strong>:
Read values from a function table at any rate, either by direct
indexing (table), or by linear interpolation (tablei) or cubic
interpolation (table3). These opcodes provide many options and are
robust in use as they check for user error in defining table
reading index values. They may however experience problems with
non-power-of-two table sizes.</p>
<p><strong><a href="http://www.csounds.com/manual/html/tab.html">tab_i</a></strong> /
<strong><a href="http://www.csounds.com/manual/html/tab.html">tab</a></strong>:
Read values from a function table at i-rate (tab_i), k-rate or
a-rate (tab). They offer no interpolation and fewer options than
the table opcodes but they will also work with non-power-of-two
table sizes. They do not provide a boundary check which makes them
fast but also give the user the responsibility not to read any
value beyond the table boundaries.</p>
</li>
<li>
<h4>Saving Tables to Files<br/></h4>
<p><strong><a href="http://www.csounds.com/manual/html/ftsave.html">ftsave</a></strong>
/ <strong><a href="http://www.csounds.com/manual/html/ftsavek.html">ftsavek</a></strong>:
Save a function table as a file, at i-time (ftsave) or at k-rate
(ftsavek). These files can be text files or binary files but not
sound files. To save a table as a sound file you can use the user
defined opcode <a href="http://www.csounds.com/udo/displayOpcode.php?opcode_id=122">TableToSF</a>. </p>
</li>
<li>
<h4>Reading Tables From Files</h4>
<p><strong><a href="http://www.csounds.com/manual/html/ftload.html">ftload</a></strong>
/ <strong><a href="http://www.csounds.com/manual/html/ftloadk.html">ftloadk</a></strong>:
Load a function table which has previously been saved using
ftsave/ftsavek.</p>
<a href="http://www.csounds.com/manual/html/GEN23.html"><strong>GEN23</strong></a>
transfers the contents of a text file into a function
table. </li>
</ul>
</li>
</ul>
<ul>
<li>
<h3>SIGNAL INPUT/OUTPUT, SAMPLE AND LOOP PLAYBACK, SOUNDFONTS</h3>
<ul>
<li>
<h4>Signal Input And Output</h4>
<p><a href="http://www.csounds.com/manual/html/inch.html"><strong>inch</strong></a>
read the audio input from any channel of your audio device. Make
sure you have the <a href="http://www.csounds.com/manual/html/nchnls.html">nchnls</a> value
in the orchestra header set properly.<br/></p>
<p><a href="http://www.csounds.com/manual/html/outch.html"><strong>outch</strong></a>
writes any audio signal(s) to any output channel(s). If Csound is
in realtime mode (by the flag '-o dac' or by the 'Render in
Realtime' mode of a frontend like QuteCsound), the output channels
are the channels of your output device. If Csound is in 'Render to
file' mode (by the flag '-o mysoundfile.wav' or the the frontend's
choice), the output channels are the channels of the soundfile
which is being written. Make sure you have the <a href="http://www.csounds.com/manual/html/nchnls.html">nchnls</a> value
in the orchestra header set properly to get the number of channels
you wish to have.</p>
<p><a href="http://www.csounds.com/manual/html/out.html"><strong>out</strong></a>
and <a href="http://www.csounds.com/manual/html/outs.html"><strong>outs</strong></a>
are frequently used for mono and stereo output. They always write
to channel 1 (out) or channels 1 and 2 (outs).<br/></p>
<p><a href="http://www.csounds.com/manual/html/monitor.html"><strong>monitor</strong></a>
can be used (in an instrument with the highest number) to gather
the sum of all audio on all output channels.</p>
</li>
<li>
<h4>Sample Playback With Optional Looping</h4>
<p><a href="http://www.csounds.com/manual/html/flooper2.html"><strong>flooper2</strong></a>
is a function table based crossfading looper.<br/></p>
<p><a href="http://www.csounds.com/manual/html/sndloop.html"><strong>sndloop</strong></a>
records input audio and plays it back in a loop with user-defined
duration and crossfade time.<br/></p>
<p>Note that there are additional user defined opcodes for the
playback of samples stored in buffers / function tables.</p>
</li>
<li>
<h4>Soundfonts And Fluid Opcodes</h4>
<p><a href="http://www.csounds.com/manual/html/fluidEngine.html"/></p>
<p><a href="http://www.csounds.com/manual/html/fluidEngine.html"><strong>fluidEngine</strong></a>
instantiates a FluidSynth engine.<br/></p>
<p><a href="http://www.csounds.com/manual/html/fluidSetInterpMethod.html"><strong>
fluidSetInterpMethod</strong></a> sets an interpolation method for
a channel in a FluidSynth engine.<br/></p>
<p><a href="http://www.csounds.com/manual/html/fluidLoad.html"><strong>fluidLoad</strong></a>
loads SoundFonts.<br/></p>
<p><a href="http://www.csounds.com/manual/html/fluidProgramSelect.html"><strong>
fluidProgramSelect</strong></a> assigns presets from a SoundFont to
a FluidSynth engine's MIDI channel.<br/></p>
<p><a href="http://www.csounds.com/manual/html/fluidNote.html"><strong>fluidNote</strong></a>
plays a note on a FluidSynth engine's MIDI channel.<br/></p>
<p><a href="http://www.csounds.com/manual/html/fluidCCi.html"><strong>fluidCCi</strong></a>
sends a controller message at i-time to a FluidSynth engine's MIDI
channel.<br/></p>
<p><a href="http://www.csounds.com/manual/html/fluidCCk.html"><strong>fluidCCk</strong></a>
sends a controller message at k-rate to a FluidSynth engine's MIDI
channel.<br/></p>
<p><a href="http://www.csounds.com/manual/html/fluidControl.html"><strong>fluidControl</strong></a>
plays and controls loaded Soundfonts (using 'raw' MIDI
messages).<br/></p>
<p><a href="http://www.csounds.com/manual/html/fluidOut.html"><strong>fluidOut</strong></a>
receives audio from a single FluidSynth engine.<br/></p>
<a href="http://www.csounds.com/manual/html/fluidAllOut.html"><strong>fluidAllOut</strong></a>
receives audio from all FluidSynth engines.</li>
</ul>
</li>
</ul>
<ul>
<li>
<h3>FILE INPUT AND OUTPUT</h3>
<ul>
<li>
<h4>Sound File Input </h4>
<p><a href="http://www.csounds.com/manual/html/soundin.html"><strong>soundin</strong></a>
reads from a sound file (up to 24 channels). It is important to
ensure that the <a href="http://www.csounds.com/manual/html/sr.html">sr</a> value in the
orchestra header matches the sample rate of your sound file
otherwise the sound file will play back at a different speed and
pitch.<br/></p>
<p><a href="http://www.csounds.com/manual/html/diskin2.html"><strong>diskin</strong></a>
is like soundin, but can also alter the speed of reading also
resulting in higher or lower pitches. There is also the option to
loop the file.<br/></p>
<p><a href="http://www.csounds.com/manual/html/diskin2.html"><strong>diskin2</strong></a>
is similar to diskin, but it automatically converts the sample rate
of the sound file if it does not match the sample rate of the
orchestra. It also offers different interpolation methods to
implement different levels of sound quality when sound files are
read at altered speeds.</p>
<p><a href="http://www.csounds.com/manual/html/GEN01.html"><strong>GEN01</strong></a>
loads a sound file into a function table (buffer).</p>
<a href="http://www.csounds.com/manual/html/mp3in.html"><strong>mp3in</strong></a>
facilitates the playing of mp3 sound files.<br/></li>
<li>
<h4>Sound File Queries </h4>
<p><a href="http://www.csounds.com/manual/html/filelen.html"><strong>filelen</strong></a>
returns the length of a sound file in seconds.</p>
<p><a href="http://www.csounds.com/manual/html/filesr.html"><strong>filesr</strong></a>
returns the sample rate of a sound file.</p>
<p><a href="http://www.csounds.com/manual/html/filenchnls.html"><strong>filenchnls</strong></a>
returns the number of channels of a sound file.</p>
<p><a href="http://www.csounds.com/manual/html/filepeak.html"><strong>filepeak</strong></a>
returns the peak absolute value of a sound file, either of one
specified channel, or from all channels. Make sure you have set
<a href="http://www.csounds.com/manual/html/0dbfs.html">0dbfs</a>
to 1; otherwise you will get values relative to Csound's default
0dbfs value of 32768.</p>
<a href="http://www.csounds.com/manual/html/filebit.html"><strong>filebit</strong></a>
returns the bit depth of a sound file.</li>
<li>
<h4>Sound File Output </h4>
<p><a href="http://www.csounds.com/manual/html/fout.html"/></p>
<p>Keep in mind that Csound always writes output to a file if you
have set the '-o' flag to the name of a sound file (or if you
choose 'render to file' in a front-end like QuteCound).<br/></p>
<p><a href="http://www.csounds.com/manual/html/fout.html"><strong>fout</strong></a>
writes any audio signal(s) to a file, regardless of whether Csound
is in realtime or non-realtime mode. This opcode is recommended for
rendering a realtime performance as a sound file on disc.</p>
</li>
<li>
<h4>Non-Soundfile Input And Output </h4>
<p><a href="http://www.csounds.com/manual/html/readk.html"/></p>
<p><a href="http://www.csounds.com/manual/html/readk.html"><strong>readk</strong></a>
can read data from external files (for instance a text file) and
transform them to k-rate values.<br/></p>
<p><a href="http://www.csounds.com/manual/html/GEN23.html"><strong>GEN23</strong></a>
transfers a text file into a function table.</p>
<p><a href="http://www.csounds.com/manual/html/dumpk.html"><strong>dumpk</strong></a>
writes k-rate signals to a text file.</p>
<p><a href="http://www.csounds.com/manual/html/fprints.html"><strong>fprints</strong></a>
/ <a href="http://www.csounds.com/manual/html/fprintks.html"><strong>fprintks</strong></a>
write any formatted string to a file. If you call this opcode
several times during one performance, the strings are appended. If
you write to an pre-existing file, the file will be
overwritten.<br/></p>
<p><strong><a href="http://www.csounds.com/manual/html/ftsave.html">ftsave</a></strong>
/ <strong><a href="http://www.csounds.com/manual/html/ftsavek.html">ftsavek</a></strong>:
Save a function table as a binary or text file, in a specific
format.</p>
<p><strong><a href="http://www.csounds.com/manual/html/ftload.html">ftload</a></strong>
/ <strong><a href="http://www.csounds.com/manual/html/ftloadk.html">ftloadk</a></strong>:
Load a function table which has been written by ftsave/ftsavek.</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>
<h3>CONVERTERS OF DATA TYPES<br/></h3>
<ul>
<li>
<h4>i &lt;- k </h4>
<p><a href="http://www.csounds.com/manual/html/opi.html"/><a href="http://www.csounds.com/manual/html/opi.html"><strong>i(k)</strong></a>
returns the value of a k-variable at init-time. This can be useful
to get the value of GUI controllers, or when using the reinit
feature.</p>
</li>
<li>
<h4>k &lt;- a </h4>
<p><a href="http://www.csounds.com/manual/html/downsamp.html"><strong>downsamp</strong></a>
converts an a-rate signal to a k-rate signal, with optional
averaging.<br/></p>
<a href="http://www.csounds.com/manual/html/max_k.html"><strong>max_k</strong></a>
returns the maximum of an k-rate signal in a certain time span,
with different options of calculation<br/></li>
<li>
<h4>a &lt;- k</h4>
<p><a href="http://www.csounds.com/manual/html/upsamp.html"><strong>upsamp</strong></a>
converts a k-rate signal to an a-rate signal by simple repetitions.
It is the same as the statement asig=ksig.<br/></p>
<a href="http://www.csounds.com/manual/html/interp.html"><strong>interp</strong></a>
converts a k-rate signal to an a-rate signal by interpolation.</li>
</ul>
</li>
</ul>
<ul>
<li>
<h3>PRINTING AND STRINGS<br/></h3>
<ul>
<li>
<h4>Simple Printing </h4>
<p><a href="http://www.csounds.com/manual/html/print.html"/></p>
<p><a href="http://www.csounds.com/manual/html/print.html"><strong>print</strong></a>
is a simple opcode for printing i-variables. Note that the printed
numbers are rounded to 3 decimal places.</p>
<p><a href="http://www.csounds.com/manual/html/printk.html"><strong>printk</strong></a>
is its counterpart for k-variables. The <em>itime</em> argument
specifies the time in seconds between printings (<em>itime=0</em>
means one printout in each k-cycle which is usually some thousand
printings per second).</p>
<p><a href="http://www.csounds.com/manual/html/printk2.html"><strong>printk2</strong></a>
prints a k-variable whenever it changes.</p>
<strong><a href="http://www.csounds.com/manual/html/puts.html">puts</a></strong>
prints S-variables. The <em>ktrig</em> argument lets you print
either at i-time or at k-rate.</li>
<li>
<h4>Formatted Printing </h4>
<p><a href="http://www.csounds.com/manual/html/prints.html"/></p>
<p><a href="http://www.csounds.com/manual/html/prints.html"><strong>prints</strong></a>
lets you print a format string at i-time. The format is similar to
the C-style syntax but there is no %s format, therefore string
variables cannot can be printed.</p>
<p><a href="http://www.csounds.com/manual/html/printf.html"><strong>printf_i</strong></a>
is very similar to prints. It also works at init-time. The
advantage in comparision to prints is the ability of printing
string variables. On the other hand,  you need a trigger and
at least one input argument.</p>
<p><a href="http://www.csounds.com/manual/html/printks.html"><strong>printks</strong></a>
is like prints, but takes k-variables, and like printk, you must
specify a time between printing.</p>
<a href="http://www.csounds.com/manual/html/printf.html"><strong>printf</strong></a>
is like printf_i, but works at k-rate.</li>
<li>
<h4>String Variables </h4>
<p><a href="http://www.csounds.com/manual/html/sprintf.html"/></p>
<p><a href="http://www.csounds.com/manual/html/sprintf.html"><strong>sprintf</strong></a>
works like printf_i, but stores the output in a string variable,
instead of printing it out.</p>
<p><a href="http://www.csounds.com/manual/html/sprintfk.html"><strong>sprintfk</strong></a>
is the same for k-rate arguments.</p>
<p><a href="http://www.csounds.com/manual/html/strset.html"><strong>strset</strong></a>
links any string with a numeric value.</p>
<a href="http://www.csounds.com/manual/html/strget.html"><strong>strget</strong></a>
transforms a strset number back to a string.</li>
<li>
<h4>String Manipulation And Conversion</h4>
<p>There are many opcodes for analysing, manipulating and
converting strings. There is a good overview in the Canonical
Csound Manual on <a href="http://www.csounds.com/manual/html/StringsTop.html#stringmanipulate">
this</a> and <a href="http://www.csounds.com/manual/html/stringconvert.html">that</a>
page.</p>
</li>
</ul>
</li>
</ul>
<h3><br/></h3>
<p> </p>
<p id="alexbreak"/>
</body>
</html>
