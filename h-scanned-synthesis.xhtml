<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" epub:prefix="z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en" xml:lang="en">
  <head>
    <title>H. SCANNED SYNTHESIS</title>
  </head>
  <body><h1>H. SCANNED SYNTHESIS</h1><p>Scanned Synthesis is a relatively new synthesis technique
invented by Max Mathews, Rob Shaw and Bill Verplank at Interval
Research in 2000. This algorithm uses a combination of a
table-lookup oscillator and Sir Issac Newton's mechanical model
(equation) of a mass and spring system to dynamically change the
values stored in an f-table. The sonic result is a timbral spectrum
that changes with time.</p>
<p>Csound has a couple opcodes dedicated to scanned synthesis, and
these opcodes can be used not only to make sounds, but also to
generate dynamic f-tables for use with other Csound opcodes.</p>
<h2>A QUICK SCANNED SYNTH</h2>
<p>The quickest way to start using scanned synthesis is Matt
Ingalls' opcode <em><a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scantable.html">scantable</a>.</em></p>
<pre>
<code>a1 <strong>scantable</strong> iamp, kfrq, ipos, imass, istiff, idamp, ivel </code>
</pre>
<p>The arguments <em>iamp</em> and <em>kfrq</em> should be
familiar, amplitude and frequency respectively. The other arguments
are f-table numbers containing data known in the scanned synthesis
world as <strong>profiles</strong>.</p>
<h2>PROFILES</h2>
<p>Profiles refer to variables in the mass and spring equation.
Newton's model describes a string as a finite series of marbles
connected to each other with springs.</p>
<p>In this example we will use 128 marbles in our system. To the
Csound user, profiles are a series of f-tables that set up the
<a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scantable.html"><em>scantable</em></a>
opcode. To the opcode, these f-tables influence the
dynamic behavior of the table read by a table-lookup
oscillator.</p>
<pre>
<code>gipos ftgen 1, 0, 128, 10, 1 ;Initial Shape: Sine wave range -1 to 1 <br/>gimass ftgen 2, 0, 128, -7, 1, 1 ;Masses: Constant value 1 <br/>gistiff ftgen 3, 0, 128, -7, 50, 64, 100, 64, 0 ;Stiffness: Unipolar triangle range to 100 <br/>gidamp ftgen 4, 0, 128, -7, 1, 128, 1 ;Damping: Constant value 1 <br/>givel ftgen 5, 0, 128, -7, 0, 128, 0 ;Initial Velocity: Constant value 0 </code></pre>
<p>These tables need to be the same size as each other or Csound
will return an error.</p>
<p>Run the following <em>.csd.</em> Notice that the sound starts
off sounding like our intial shape (a sine wave) but evolves as if
there are filters, distortions or LFO's.</p>
<p><em><strong>EXAMPLE 04H01_scantable.csd</strong></em></p>
<pre>
<code>&lt;CsoundSynthesizer&gt;<br/>&lt;CsOptions&gt;<br/>-o dac<br/>&lt;/CsOptions&gt;<br/>&lt;CsInstruments&gt;<br/>nchnls = 2<br/>sr=44100<br/>ksmps = 32<br/>0dbfs = 1<br/><br/>gipos ftgen 1, 0, 128, 10, 1 ;Initial Shape, sine wave range -1 to 1<br/>gimass ftgen 2, 0, 128, -7, 1, 128, 1 ;Masses(adj.), constant value 1<br/>gistiff ftgen 3, 0, 128, -7, 50, 64, 100, 64, 0 ;Stiffness; unipolar triangle range 0 to 100<br/>gidamp ftgen 4, 0, 128, -7, 1, 128, 1 ;Damping; constant value 1<br/>givel ftgen 5, 0, 128, -7, 0, 128, 0 ;Initial Velocity; constant value 0<br/><br/> instr 1<br/>iamp = .7<br/>kfrq = 440<br/>a1 scantable iamp, kfrq, gipos, gimass, gistiff, gidamp, givel<br/>a1 dcblock2 a1<br/> outs a1, a1<br/> endin<br/><br/>&lt;/CsInstruments&gt;<br/>&lt;CsScore&gt;<br/>i 1 0 10<br/>e<br/>&lt;/CsScore&gt;<br/>&lt;/CsoundSynthesizer&gt;<br/>;Example by Christopher Saunders<br/><br/></code></pre>
<p>But as you see no effects or control signals in the .csd, just a
synth!</p>
<p>This is the power of scanned synthesis. It produces a dynamic
spectrum with "just" an oscillator. Imagine now applying a scanned
synthesis oscillator to all your favorite synth techniques -
Subtractive, Waveshaping, FM, Granular and more.</p>
<p>Recall from the subtractive synthesis technique, that the
"shape" of the waveform of your oscillator has a huge effect on the
way the oscillator sounds. In scanned synthesis, the shape is in
motion and these f-tables control how the shape moves.</p>
<h2>DYNAMIC TABLES</h2>
<p>The <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scantable.html"><em>scantable</em></a>
opcode makes it easy to use dynamic f-tables in other csound
opcodes. The example below sounds exactly like the above .csd, but
it demonstrates how the f-table set into motion by scantable can be
used by other csound opcodes.</p>
<p><em><strong>EXAMPLE 04H02_Dynamic_tables.csd</strong></em></p>
<pre>
<code>&lt;CsoundSynthesizer&gt;<br/>&lt;CsOptions&gt;<br/>-o dac<br/>&lt;/CsOptions&gt;<br/>&lt;CsInstruments&gt;<br/>nchnls = 2<br/>sr=44100<br/>ksmps = 32<br/>0dbfs = 1<br/><br/>gipos      ftgen      1, 0, 128, 10, 1 ;Initial Shape, sine wave range -1 to 1;<br/>gimass     ftgen      2, 0, 128, -7, 1, 128, 1 ;Masses(adj.), constant value 1<br/>gistiff    ftgen      3, 0, 128, -7, 50, 64, 100, 64, 0 ;Stiffness; unipolar triangle range 0 to 100<br/>gidamp     ftgen      4, 0, 128, -7, 1, 128, 1 ;Damping; constant value 1<br/>givel      ftgen      5, 0, 128, -7, 0, 128, 0 ;Initial Velocity; constant value 0<br/><br/>instr 1<br/>iamp       =          .7<br/>kfrq       =          440<br/>a0         scantable  iamp, kfrq, gipos, gimass, gistiff, gidamp, givel ;<br/>a1         oscil3     iamp, kfrq, gipos<br/>a1         dcblock2   a1<br/>           outs       a1, a1<br/>endin<br/>&lt;/CsInstruments&gt;<br/>&lt;CsScore&gt;<br/>i 1 0 10<br/>e<br/>&lt;/CsScore&gt;<br/>&lt;/CsoundSynthesizer&gt;<br/>;Example by Christopher Saunders<br/></code></pre>
<p>Above we use a table-lookup oscillator to periodically read a
dynamic table.</p>
<p>Below is an example of using the values of an f-table generated
by <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scantable.html"><em>scantable</em></a>,
to modify the amplitudes of an fsig, a signal type in csound which
represents a spectral signal.</p>
<p><em><strong>EXAMPLE
04H03_Scantable_pvsmaska.csd</strong></em></p>
<pre>
&lt;CsoundSynthesizer&gt;<br/>&lt;CsOptions&gt;<br/>-o dac<br/>&lt;/CsOptions&gt;<br/>&lt;CsInstruments&gt;<br/>nchnls = 2<br/>sr=44100<br/>ksmps = 32<br/>0dbfs = 1<br/><br/>gipos      ftgen      1, 0, 128, 10, 1                  ;Initial Shape, sine wave range -1 to 1;<br/>gimass     ftgen      2, 0, 128, -7, 1, 128, 1          ;Masses(adj.), constant value 1<br/>gistiff    ftgen      3, 0, 128, -7, 50, 64, 100, 64, 0 ;Stiffness; unipolar triangle range 0 to 100<br/>gidamp     ftgen      4, 0, 128, -7, 1, 128, 1          ;Damping; constant value 1<br/>givel      ftgen      5, 0, 128, -7, 0, 128, 0          ;Initial Velocity; constant value 0<br/>gisin      ftgen      6, 0,8192, 10, 1                  ;Sine wave for buzz opcode<br/><br/>instr 1<br/>iamp       =          .7<br/>kfrq       =          110<br/>a1         buzz       iamp, kfrq, 32, gisin<br/>           outs       a1, a1<br/>endin<br/>instr 2<br/>iamp       =          .7<br/>kfrq       =          110<br/>a0         scantable  1, 10, gipos, gimass, gistiff, gidamp, givel ;<br/>ifftsize   =          128<br/>ioverlap   =          ifftsize / 4<br/>iwinsize   =          ifftsize<br/>iwinshape  =          1; von-Hann window<br/>a1         buzz       iamp, kfrq, 32, gisin<br/>fftin      pvsanal    a1, ifftsize, ioverlap, iwinsize, iwinshape; fft-analysis of file<br/>fmask      pvsmaska   fftin, 1, 1<br/>a2         pvsynth    fmask; resynthesize<br/>           outs       a2, a2<br/>endin<br/>&lt;/CsInstruments&gt;<br/>&lt;CsScore&gt;<br/>i 1 0 3<br/>i 2 5 10<br/>e<br/>&lt;/CsScore&gt;<br/>&lt;/CsoundSynthesizer&gt;<br/>;Example by Christopher Saunders&lt;/code&gt;<br/></pre>
<p>In this .csd, the score plays instrument 1, a normal buzz sound,
and then the score plays instrument 2 -- the same buzz sound
re-synthesized with amplitudes of each of the 128 frequency bands,
controlled by a dynamic f-table. </p>
<h2>A MORE FLEXIBLE SCANNED SYNTH</h2>
<p><a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scantable.html"><em>Scantable</em></a>
can do a lot for us, it can synthesize an interesting, time-varying
timbre using a table lookup oscillator, or animate an f-table for
use in other Csound opcodes. However, there are other scanned
synthesis opcodes that can take our expressive use of the algorithm
even further.</p>
<p>The opcodes <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scans.html"><em>scans</em></a>
and <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scanu.html"><em>scanu</em></a>
by Paris Smaragdis give the Csound user one of the most robust and
flexible scanned synthesis environments. These opcodes work in
tandem to first set up the dynamic wavetable, and then to "scan"
the dynamic table in ways a table-lookup oscillator cannot.</p>
<p>The opcode <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scanu.html"><em>scanu</em></a>
takes 18 arguments and sets a table into motion.</p>
<pre>
<code> <strong>scanu</strong> ipos, irate, ifnvel, ifnmass, ifnstif, ifncentr, ifndamp, kmass, kstif, kcentr, kdamp, ileft, iright, kpos, kstrngth, ain, idisp, id </code>
</pre>
<p>For a detailed description of what each argument does, see the
<a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scanu.html">Csound
Reference Manual</a>; I will discuss the various types of arguments
in the opcode.</p>
<p>The first set of arguments - <em>ipos, irate, ifnvel, ifnmass,
ifnstiff, ifncenter</em>, and <em>ifndamp</em> - are f-tables
describing the profiles, similar to the profile arguments for
<em>scantable</em>. <em>Scanu</em> takes 6 f-tables instead of
<em>scantable's</em> 5. Like <em><a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scantable.html">scantable</a>,</em>
these need to be f-tables of the same size, or Csound will return
an error.</p>
<p>An exception to this size requirement is the
<code>ifnstiff</code> table. This table is the size of the other
profiles squared. If the other f-tables are size 128, then
<em>ifnstiff</em> should be of size 16384 (or 128 * 128). To
discuss what this table does, I must first introduce the concept of
a scanned matrix.</p>
<h2>THE SCANNED MATRIX</h2>
<p>The scanned matrix is a convention designed to describe the
shape of the connections of masses(<strong>n.</strong>) in the
mass(<strong>n.</strong>) and spring model.</p>
<p>Going back to our discussion on Newton's mechanical model, the
mass(<strong>n.</strong>) and spring model describes the behavior
of a string as a finite number of masses connected by springs. As
you can imagine, the masses are connected sequentially, one to
another, like beads on a string. Mass(<strong>n.</strong>) #1 is
connected to #2, #2 connected to #3 and so on. However, the
pioneers of scanned synthesis had the idea to connect the masses in
a non-linear way. It's hard to imagine, because as musicians, we
have experience with piano or violin strings (one dimensional
strings), but not with multi-dimensional strings. Fortunately, the
computer has no problem working with this idea, and the flexibility
of Newton's equation allows us to use the CPU to model
mass(<strong>n.</strong>) #1 being connected with springs not only
to #2 but also to #3 and any other mass(<strong>n.</strong>) in the
model.</p>
<p>The most direct and useful implementation of this concept is to
connect mass #1 to mass #2 and mass #128 -- forming a string
without endpoints, a circular string, like tying our string with
beads to make a necklace. The pioneers of scanned synthesis
discovered that this circular string model is more useful than a
conventional one-dimensional string model with endpoints. In fact,
<em><a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scantable.html">scantable</a></em>
uses a circular string.</p>
<p>The matrix is described in a simple ASCII file, imported into
Csound via a GEN23 generated f-table.</p>
<pre><code>f3 0 16384 -23 "string-128" </code>
</pre>
<p>This text file <strong>must</strong> be located in the same
directory as your .csd or csound will give you this error</p>
<p><code>ftable 3: error opening ASCII file</code></p>
<p>You can construct your own matrix using Stephen Yi's Scanned
Matrix editor included in the Blue frontend for Csound, and as a
standalone Java application <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/stevenyi/scanned/">Scanned Synthesis Matrix
Editor</a>.</p>
<p>To swap out matrices, simply type the name of a different matrix
file into the double quotes, i.e.:</p>
<pre><code>f3 0 16384 -23 "circularstring_2-128"</code></pre>
<p>Different matrices have unique effects on the behavior of the
system. Some matrices can make the synth extremely loud, others
extremely quiet. Experiment with using different matrices.</p>
<p>Now would be a good time to point out that Csound has other
scanned synthesis opcodes preceded with an "x", <em><a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/xscans.html">xscans</a>,
<a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/xscanu.html">xscanu</a></em>,
that use a different matrix format than the one used by <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scans.html"><em>scans</em></a>,
<a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scanu.html"><em>scanu</em></a>,
and Stephen Yi's Scanned Matrix Editor. The Csound Reference Manual
has more information on this.</p>
<h2>THE HAMMER</h2>
<p>If the initial shape, an f-table specified by the ipos argument
determines the shape of the initial contents in our dynamic table.
If you use autocomplete in CsoundQT, the <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scanu.html">scanu</a> opcode
line highlights the first p-field of scanu as the "init" opcode. In
my examples I use "ipos" to avoid p1 of scanu being
syntax-highlighted. But what if we want to "reset" or "pluck" the
table, perhaps with a shape of a square wave instead of a sine
wave, while the instrument is playing?</p>
<p>With <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scantable.html"><em>scantable</em></a>,
there is an easy way to to this, send a score event changing the
contents of the dynamic f-table. You can do this with the Csound
score by adjusting the start time of the f-events in the score.</p>
<p><em><strong>EXAMPLE 04H04_Hammer.csd</strong></em></p>
<pre>
&lt;CsoundSynthesizer&gt;<br/>&lt;CsOptions&gt;<br/>-o dac<br/>&lt;/CsOptions&gt;<br/>&lt;CsInstruments&gt;<br/>sr=44100<br/>kr=4410<br/>ksmps=10<br/>nchnls=2<br/>0dbfs=1<br/><br/>instr 1<br/>ipos       ftgen      1, 0, 128, 10, 1 ; Initial Shape, sine wave range -1 to 1;<br/>imass      ftgen      2, 0, 128, -7, 1, 128, 1 ;Masses(adj.), constant value 1<br/>istiff     ftgen      3, 0, 128, -7, 50, 64, 100, 64, 0 ;Stiffness; unipolar triangle range 0 to 100<br/>idamp      ftgen      4, 0, 128, -7, 1, 128, 1; ;Damping; constant value 1<br/>ivel       ftgen      5, 0, 128, -7, 0, 128, 0 ;Initial Velocity; constant value 0<br/>iamp       =          0.5<br/>a1         scantable  iamp, 60, ipos, imass, istiff, idamp, ivel<br/>           outs       a1, a1<br/>endin<br/>&lt;/CsInstruments&gt;<br/>&lt;CsScore&gt;<br/>i 1 0 14<br/>f 1 1 128 10 1 1 1 1 1 1 1 1 1 1 1<br/>f 1 2 128 10 1 1 0 0 0 0 0 0 0 1 1<br/>f 1 3 128 10 1 1 1 1 1<br/>f 1 4 128 10 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1<br/>f 1 5 128 10 1 1<br/>f 1 6 128 13 1 1 0 0 0 -.1 0 .3 0 -.5 0 .7 0 -.9 0 1 0 -1 0<br/>f 1 7 128 21 6 5.745<br/>&lt;/CsScore&gt;<br/>&lt;/CsoundSynthesizer&gt;<br/>;Example by Christopher Saunders&lt;/code&gt;<br/></pre>
<p>You'll get the warning</p>
<pre>
<code><span>WARNING: </span>replacing previous ftable 1 </code></pre>
<p>This is not a bad thing, it means this method of hammering the
string is working. In fact you could use this method to explore and
hammer every possible GEN routine in Csound. <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/GEN10.html">GEN10</a> (sines),
<a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/GEN21.html">GEN 21</a>
(noise) and <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/GEN27.html">GEN 27</a>
(breakpoint functions) could keep you occupied for a while.</p>
<p>Unipolar waves have a different sound but a loss in volume can
occur. There is a way to do this with <em><a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scanu.html">scanu</a>,</em> but
I do not use this feature and just use these values instead.</p>
<pre>
<code> ileft = 0. iright = 1. kpos = 0. kstrngth = 0. </code></pre>
<h2>MORE ON PROFILES</h2>
<p>One of the biggest challenges in understanding scanned synthesis
is the concept of profiles.</p>
<p>Setting up the opcode <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scanu.html"><em>scanu</em></a>
requires 3 profiles - Centering, Mass and Damping. The pioneers of
scanned synthesis discovered early on that the resultant timbre is
far more interesting if marble #1 had a different centering force
than mass #64.</p>
<p>The farther our model gets away from a physical real-world
string that we know and pluck on our guitars and pianos, the more
interesting the sounds for synthesis. Therefore, instead of one
mass, and damping, and centering value for all 128 of the marbles
each marble can have its own conditions. How the centering, mass,
and damping profiles make the system behave is up to the user to
discover through experimentation (more on how to experiment safely
later in this chapter).</p>
<h2>CONTROL RATE PROFILE SCALARS</h2>
<p>Profiles are a detailed way to control the behavior of the
string, but what if we want to influence the mass or centering or
damping of every marble <strong>after</strong> a note has been
activated and while its playing?</p>
<p><a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scanu.html"><em>Scanu</em></a>
gives us 4 k-rate arguments <em>kmass, kstif, kcentr, kdamp</em>,
to scale these forces. One could scale mass to volume, or have an
envelope controlling centering.</p>
<p><strong>Caution!</strong> These parameters can make the scanned
system unstable in ways that could make <strong>extremely</strong>
loud sounds come out of your computer. It is best to experiment
with small changes in range and keep your headphones off. A good
place to start experimenting is with different values for
<em>kcentr</em> while keeping <em>kmass</em>, <em>kstiff</em>, and
<em>kdamp</em> constant. You could also scale mass and stiffness to
MIDI velocity.</p>
<h2>AUDIO INJECTION</h2>
<p>Instead of using the hammer method to move the marbles around,
we could use audio to add motion to the mass and spring model.
<em>Scanu</em> lets us do this with a simple audio rate argument.
When the Reference manual says "amplitude should not be too great"
<strong>it means it.</strong></p>
<p>A good place to start is by scaling down the audio in the opcode
line.</p>
<pre><code> ain/2000 </code></pre>
<p>It is always a good idea to take into account the 0dbfs
statement in the header. Simply put if 0dbfs =1 and you send
<em>scans</em> an audio signal with a value of 1, you and your
immediate neighbors are in for a very loud ugly sound.</p>
<p><strong>amplitude should not be too great!</strong></p>
<p>To bypass audio injection all together, simply assign 0 to an
a-rate variable.</p>
<pre><code> ain = 0 </code></pre>
<p>and use this variable as the argument.</p>
<h2>CONNECTING TO SCANS</h2>
<p>The p-field id is an arbitrary integer label that tells the
scans opcode which <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scanu.html"><em>scanu</em></a>
to read. By making the value of id negative, the arbitrary
numerical label becomes the number of an f-table that can be used
by any other opcode in Csound, like we did with <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scantable.html"><em>scantable</em></a>
earlier in this chapter.</p>
<p>We could then use <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/oscil.html"><em>oscil</em></a>
to perform a table lookup algorithm to make sound out of <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scanu.html"><em>scanu</em></a>
(as long as id is negative), but <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scanu.html"><em>scanu</em></a>
has a companion opcode, <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scans.html"><em>scans</em></a>
which has 1 more argument than <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/oscil.html"><em>oscil</em></a>.
This argument is the number of an f-table containing the scan
trajectory.</p>
<h2>SCAN TRAJECTORIES</h2>
<p>One thing we have take for granted so far with <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/oscil.html"><em>oscil</em></a>
is that the wave table is read front to back. If you regard oscil
as a phasor and table pair, the first index of the table is always
read first and the last index is always read last as in the example
below:</p>
<p><em><strong>EXAMPLE
04H05_Scan_trajectories.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;

sr=44100
kr=4410
ksmps=10
nchnls=2
0dbfs=1

instr 1
andx phasor 440
a1 table andx*8192, 1
outs a1*.2, a1*.2
endin
&lt;/CsInstruments&gt;
&lt;CsScore&gt;

f1 0 8192 10 1
i 1 0 4
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
;Example by Christopher Saunders
</pre>
<p> </p>
<p>But what if we wanted to read the table indices back to front,
or even "out of order"? Well we could do something like this:</p>
<p><em><strong>EXAMPLE
04H06_Scan_trajectories2.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
sr=44100
kr=4410
ksmps=10
nchnls=2 ; STEREO
0dbfs=1
instr 1
andx phasor 440
andx table andx*8192, 1  ; read the table out of order!
a1   table andx*8192, 1
outs a1*.2, a1*.2
endin
&lt;/CsInstruments&gt;
&lt;CsScore&gt;

f1 0 8192 10 1
f2 0 8192 -5 .001 8192 1;
i 1 0 4
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
;Example by Christopher Saunders
</pre>
<p> </p>
<p>We are still dealing with 2-dimensional arrays, or f-tables as
we know them. But if we remember back to our conversation about the
scanned matrix, matrices are multi-dimensional, it would be a shame
to only read them in "2D".</p>
<p>The opcode <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scans.html"><em>scans</em></a>
gives us the flexibility of specifying a scan trajectory, analogous
to telling the phasor/table combination to read values
non-consecutively. We could read these values, not left to right,
but in a spiral order, by specifying a table to be the
<em>ifntraj</em> argument of <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scans.html"><em>scans</em></a>.</p>
<pre><code>a3 scans iamp, kpch, ifntraj ,id , interp </code></pre>
<p>An f-table for the spiral method can generated by reading the
ASCII file "spiral-8,16,128,2,1over2" by GEN23</p>
<pre><code>f2 0 128 -23 "spiral-8,16,128,2,1over2" </code></pre>
<p> </p>
<p>The following .csd requires that the files "circularstring-128"
and "spiral-8,16, 128,2,1over2" be located in the same directory as
the .csd.</p>
<p><em><strong>EXAMPLE 04H07_Scan_matrices.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
nchnls = 2
sr = 44100
ksmps = 10
0dbfs = 1
instr 1
ipos ftgen 1, 0, 128, 10, 1
irate = .005
ifnvel ftgen 6, 0, 128, -7, 0, 128, 0
ifnmass ftgen 2, 0, 128, -7, 1, 128, 1
ifnstif ftgen 3, 0, 16384,-23,"circularstring-128"
ifncentr ftgen 4, 0, 128, -7, 0, 128, 2
ifndamp ftgen 5, 0, 128, -7, 1, 128, 1
imass = 2
istif = 1.1
icentr = .1
idamp = -0.01
ileft = 0.
iright = .5
ipos = 0.
istrngth = 0.
ain = 0
idisp = 0
id = 8
scanu 1, irate, ifnvel, ifnmass, ifnstif, ifncentr, ifndamp, imass, istif, icentr, idamp, ileft, iright, ipos, istrngth, ain, idisp, id
scanu 1,.007,6,2,3,4,5, 2, 1.10 ,.10 ,0 ,.1 ,.5, 0, 0,ain,1,2;
iamp = .2
ifreq = 200
a1 scans iamp, ifreq, 7, id
a1 dcblock a1
outs a1, a1
endin
&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f7 0 128 -7 0 128 128
i 1 0 5
f7 5 128 -23 "spiral-8,16,128,2,1over2"
i 1 5 5
f7 10 128 -7 127 64 1 63 127
i 1 10 5
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
;Example by Christopher Saunders
</pre>
<p> </p>
<p>Notice that the scan trajectory has an FM-like effect on the
sound.</p>
<h2>TABLE SIZE AND INTERPOLATION</h2>
<p>Tables used for scan trajectory must be the same size (have the
same number of indices) as the mass, centering and damping tables
and must also have the same range as the size of these tables. For
example, in our .csd we've been using 128 point tables for initial
position, mass centering, damping (our stiffness tables have 128
squared). So our trajectory tables must be of size 128, and contain
values from 0 to 127.</p>
<p>One can use larger or smaller tables, but their sizes must agree
in this way or Csound will give you an error. Larger tables, of
course significantly increase CPU usage and slow down real-time
performance.</p>
<p>If all the sizes are multiples of a number (128), we can use
Csound's Macro language extension to define the table size as a
macro, and then change the definition twice (once for the orc and
once for the score) instead of 10 times.</p>
<p><em><strong>EXAMPLE 04H08_Scan_tablesize.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
nchnls = 2
sr = 44100
ksmps = 10
0dbfs = 1
#define SIZE #128#
instr 1
ipos ftgen 1, 0, $SIZE., 10, 1
irate = .005
ifnvel ftgen 6, 0, $SIZE., -7, 0, $SIZE., 0
ifnmass ftgen 2, 0, $SIZE., -7, 1, $SIZE., 1
ifnstif ftgen 3, 0, $SIZE.*$SIZE.,-23, "circularstring-$SIZE."
ifncentr ftgen 4, 0, $SIZE., -7, 0, $SIZE., 2
ifndamp ftgen 5, 0, $SIZE., -7, 1, $SIZE., 1
imass = 2
istif = 1.1
icentr = .1
idamp = -0.01
ileft = 0.
iright = .5
ipos = 0.
istrngth = 0.
ain = 0
idisp = 0
id = 8
        
scanu 1, irate, ifnvel, ifnmass, ifnstif, ifncentr, ifndamp, imass, istif, icentr, idamp, ileft, iright, ipos, istrngth, ain, idisp, id
scanu 1,.007,6,2,3,4,5, 2, 1.10 ,.10 ,0 ,.1 ,.5, 0, 0,ain,1,2;
iamp = .2
ifreq = 200
a1 scans iamp, ifreq, 7, id, 4
a1 dcblock a1
outs a1, a1
endin
&lt;/CsInstruments&gt;
&lt;CsScore&gt;
#define SIZE #128#
f7 0 $SIZE. -7 0 $SIZE. $SIZE.
i 1 0 5
f7 5 $SIZE. -7 0 63 [$SIZE.-1] 63 0
i 1 5 5
f7 10 $SIZE. -7 [$SIZE.-1] 64 1 63 [$SIZE.-1]
i 1 10 5
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
;Example by Christopher Saunders
</pre>
<p> </p>
<p>Macros even work in our string literal in our <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/GEN23.html">GEN 23</a> f-table!
But if you define size as 64 and there isn't a file in your
directory named "circularstring-64" Csound will not run your score
and give you an error. Here is a <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://csounds.com/scanned/scanned_synthesis_matricies.zip">link
to download power-of-two size ASCII files</a> that create circular
matrices for use in this way, and of course, you can design your
own stiffness matrix files with <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/stevenyi/scanned/">Steven Yi's scanned
matrix editor</a>.</p>
<p>When using smaller size tables it may be necessary to use
interpolation to avoid the artifacts of a small table.
<em>scans</em> gives us this option as a fifth optional argument,
<em>iorder,</em> detailed in the reference manual and worth
experimenting with.</p>
<p>Using the opcodes scanu and scans require that we fill in 22
arguments and create at least 7 f-tables, including at least one
external ASCII file (because no one wants to fill in 16,384
arguments to an f-statement). This a very challenging pair of
opcodes. The beauty of scanned synthesis is that there is no
scanned synthesis "sound".</p>
<h2>USING BALANCE TO TAME AMPLITUDES</h2>
<p>However, like this frontier can be a lawless, dangerous place.
When experimenting with scanned synthesis parameters, one can
illicit extraordinarily loud sounds out of Csound, often by
something as simple as a misplaced decimal point.</p>
<p><strong>Warning: the following .csd is hot, it produces
massively loud amplitude values. Be very cautious about rendering
this .csd, I highly recommend rendering to a file instead of
real-time.<br/></strong></p>
<p><em><strong>EXAMPLE
04H09_Scan_extreme_amplitude.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;

nchnls = 2
sr = 44100
ksmps = 256
0dbfs = 1
;NOTE THIS CSD WILL NOT RUN UNLESS
;IT IS IN THE SAME FOLDER AS THE FILE "STRING-128"
instr 1
ipos ftgen 1, 0, 128 , 10, 1
irate = .007
ifnvel ftgen 6, 0, 128 , -7, 0, 128, 0.1
ifnmass ftgen 2, 0, 128 , -7, 1, 128, 1
ifnstif ftgen 3, 0, 16384, -23, "string-128"
ifncentr ftgen 4, 0, 128 , -7, 1, 128, 2
ifndamp ftgen 5, 0, 128 , -7, 1, 128, 1
kmass = 1
kstif = 0.1
kcentr = .01
kdamp = 1
ileft = 0
iright = 1
kpos = 0
kstrngth = 0.
ain = 0
idisp = 1
id = 22
scanu ipos, irate, ifnvel, ifnmass, \
ifnstif, ifncentr, ifndamp, kmass, \
kstif, kcentr, kdamp, ileft, iright,\
kpos, kstrngth, ain, idisp, id
kamp = 0dbfs*.2
kfreq = 200
ifn ftgen 7, 0, 128, -5, .001, 128, 128.
a1 scans kamp, kfreq, ifn, id
a1 dcblock2 a1
iatt = .005
idec = 1
islev = 1
irel = 2
aenv adsr iatt, idec, islev, irel
;outs a1*aenv,a1*aenv; Uncomment for speaker destruction;
endin
&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f8 0 8192 10 1;
i 1 0 5
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
;Example by Christopher Saunders
</pre>
<p> </p>
<p>The extreme volume of this .csd comes from a value given to
scanu</p>
<p><code>kdamp = .1</code></p>
<p>.1 is not exactly a safe value for this argument, in fact, any
value above 0 for this argument can cause chaos.</p>
<p>It would take a skilled mathematician to map out safe possible
ranges for all the arguments of scanu. I figured out these values
through a mix of trial and error and <strong>studying other
.csd</strong></p>
<p>We can use the opcode <a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/balance.html">balance</a> to
listen to sine wave (a signal with consistent, safe amplitude) and
squash down our extremely loud scanned synth output (which is loud
only because of our intentional carelessness.)</p>
<p><em><strong>EXAMPLE
04H10_Scan_balanced_amplitudes.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;

nchnls = 2
sr = 44100
ksmps = 256
0dbfs = 1
;NOTE THIS CSD WILL NOT RUN UNLESS
;IT IS IN THE SAME FOLDER AS THE FILE "STRING-128"

instr 1
ipos ftgen 1, 0, 128 , 10, 1
irate = .007
ifnvel   ftgen 6, 0, 128 , -7, 0, 128, 0.1
ifnmass  ftgen 2, 0, 128 , -7, 1, 128, 1
ifnstif  ftgen 3, 0, 16384, -23, "string-128"
ifncentr ftgen 4, 0, 128 , -7, 1, 128, 2
ifndamp  ftgen 5, 0, 128 , -7, 1, 128, 1
kmass = 1
kstif = 0.1
kcentr = .01
kdamp = -0.01
ileft = 0
iright = 1
kpos = 0
kstrngth = 0.
ain = 0
idisp = 1
id = 22
scanu ipos, irate, ifnvel, ifnmass, \
ifnstif, ifncentr, ifndamp, kmass, \
kstif, kcentr, kdamp, ileft, iright,\
kpos, kstrngth, ain, idisp, id
kamp = 0dbfs*.2
kfreq = 200
ifn ftgen 7, 0, 128, -5, .001, 128, 128.
a1 scans kamp, kfreq, ifn, id
a1 dcblock2 a1
ifnsine ftgen 8, 0, 8192, 10, 1
a2 oscil kamp, kfreq, ifnsine
a1 balance a1, a2
iatt = .005
idec = 1
islev = 1
irel = 2
aenv adsr iatt, idec, islev, irel
outs a1*aenv,a1*aenv
endin
&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f8 0 8192 10 1;
i 1 0 5
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
;Example by Christopher Saunders
</pre>
<p> </p>
<p>It must be emphasized that this is merely a safeguard. We still
get samples out of range when we run this .csd, but many less than
if we had not used balance. It is recommended to use balance if you
are doing real-time mapping of k-rate profile scalar arguments for
<a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/manual/html/scans.html"><em>scans</em></a>;
mass stiffness, damping, and centering.</p>
<h2>REFERENCES AND FURTHER READING</h2>
<p>Max Matthews, Bill Verplank, Rob Shaw, Paris Smaragdis, Richard
Boulanger, John ffitch, Matthew Gilliard, Matt Ingalls, and Steven
Yi all worked to make scanned synthesis usable, stable and openly
available to the open-source Csound community. Their contributions
are in the reference manual, several academic papers on scanned
synthesis and journal articles, and the software that supports the
Csound community.</p>
<ul>
<li><a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/scanned/">Csounds.com page on Scanned
Synthesis</a></li>
<li><a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/scanned/toot/index.html%20">Dr. Richard
Boulanger's tutorial on Scanned Synthesis</a></li>
<li><a title="Steven Yi's Page on experimenting with Scanned Synthesis" href="http://www.csounds.com/stevenyi/scanned/yi_scannedSynthesis.html%20">
Steven Yi's Page on experimenting with Scanned Synthesis</a></li>
</ul>
</body>
</html>
