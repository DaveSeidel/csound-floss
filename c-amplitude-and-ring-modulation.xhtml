<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" epub:prefix="z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en" xml:lang="en">
  <head>
    <title>C. AMPLITUDE AND RING MODULATION</title>
  </head>
  <body><h1>C. AMPLITUDE AND RING MODULATION</h1><h2>Introduction</h2>
<p>Amplitude-modulation (AM) means, that one oscillator varies the
volume/amplitude of an other. </p><p><br/></p><div class="group_img image-layout-1image_1caption_bottom" style="text-align: start;"><div class="image bk-image-editor" style="width: 434.347px; height: 554.709px;"><img style="width: 434.347px; height: 554.709px; transform: translate(0px, 0px) rotate(0deg) scaleX(1) scaleY(1); filter: contrast(100%) brightness(100%) blur(0px) opacity(100%) saturate(100%);" src="static/am_191013_150dpi.png" alt="" transform-data="{&quot;imageWidth&quot;:434.34731934731934,&quot;imageHeight&quot;:554.7086247086247,&quot;imageTranslateX&quot;:0,&quot;imageTranslateY&quot;:0,&quot;imageScaleX&quot;:1,&quot;imageScaleY&quot;:1,&quot;imageRotateDegree&quot;:0,&quot;imageContrast&quot;:100,&quot;imageBrightness&quot;:100,&quot;imageBlur&quot;:0,&quot;imageSaturate&quot;:100,&quot;imageOpacity&quot;:100,&quot;frameWidth&quot;:434.34731934731934,&quot;frameHeight&quot;:554.7086247086247,&quot;frameFPI&quot;:false,&quot;editorWidth&quot;:898}"/></div><div class="caption_small" style="width: 434.347px;">Basic Model of Amplitude Modulation<br/></div></div><p>If this modulation is done very
slowly (1 Hz to 10 Hz) it is recognised as tremolo.
Volume-modulation above 10 Hz leads to the effect, that the sound
changes its timbre. So called side-bands appear.</p>
<p><strong><em>EXAMPLE 04C01_Simple_AM.csd</em></strong></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;

sr = 48000
ksmps = 32
nchnls = 1
0dbfs = 1

instr 1
aRaise expseg 2, 20, 100
aModSine poscil 0.5, aRaise, 1
aDCOffset = 0.5    ; we want amplitude-modulation
aCarSine poscil 0.3, 440, 1
out aCarSine*(aModSine + aDCOffset)
endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f 1 0 1024 10 1
i 1 0 25
e
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
; written by Alex Hofmann (Mar. 2011)</pre>
<h2>Theory, Mathematics and Sidebands</h2>
<p>The side-bands appear on both sides of the main frequency. This
means (freq1-freq2) and (freq1+freq2) appear.</p>
<p>The sounding result of the following example can be calculated
as this: freq1 = 440Hz, freq2 = 40 Hz -&gt; The result is a sound
with [400, 440, 480] Hz.</p>
<p>The amount of the sidebands can be controlled by a DC-offset of
the modulator.</p>
<p><strong><em>EXAMPLE 04C02_Sidebands.csd</em></strong></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;

sr = 48000
ksmps = 32
nchnls = 1
0dbfs = 1

instr 1
aOffset linseg 0, 1, 0, 5, 0.6, 3, 0
aSine1 poscil 0.3, 40 , 1
aSine2 poscil 0.3, 440, 1
out (aSine1+aOffset)*aSine2
endin


&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f 1 0 1024 10 1
i 1 0 10
e
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
; written by Alex Hofmann (Mar. 2011)
</pre>
<p>Ring-modulation is a special-case of AM, without DC-offset
(DC-Offset = 0). That means the modulator varies between -1 and +1
like the carrier. The sounding difference to AM is, that RM doesn't
contain the carrier frequency.</p><div class="group_img image-layout-1image_1caption_bottom" style="text-align: start;"><div class="image bk-image-editor" style="width: 674.023px; height: 379.923px;"><img style="width: 674.023px; height: 379.923px; transform: translate(0px, 0px) rotate(0deg) scaleX(1) scaleY(1); filter: contrast(100%) brightness(100%) blur(0px) opacity(100%) saturate(100%);" src="static/rm_191013_150dpi.png" alt="" transform-data="{&quot;imageWidth&quot;:674.02331002331,&quot;imageHeight&quot;:379.9230769230769,&quot;imageTranslateX&quot;:0,&quot;imageTranslateY&quot;:0,&quot;imageScaleX&quot;:1,&quot;imageScaleY&quot;:1,&quot;imageRotateDegree&quot;:0,&quot;imageContrast&quot;:100,&quot;imageBrightness&quot;:100,&quot;imageBlur&quot;:0,&quot;imageSaturate&quot;:100,&quot;imageOpacity&quot;:100,&quot;frameWidth&quot;:674.02331002331,&quot;frameHeight&quot;:379.9230769230769,&quot;frameFPI&quot;:false,&quot;editorWidth&quot;:898}"/></div><div class="caption_small" style="width: 674.023px;">Ring Modulation as Multiplication of two Signals<br/></div></div>
<p>(If the modulator is unipolar (oscillates between 0 and +1) the
effect is called AM.)</p>
<h2>More Complex Synthesis using Ring Modulation and Amplitude
Modulation</h2>
<p>If the modulator itself contains more harmonics, the resulting
ring modulated sound becomes more complex.</p>
<p>Carrier freq: 600 Hz<br/>
Modulator freqs: 200Hz with 3 harmonics = [200, 400, 600] Hz<br/>
Resulting freqs:  [0, 200, 400, &lt;-600-&gt;, 800, 1000,
1200]</p>
<p><strong><em>EXAMPLE 04C03_RingMod.csd</em></strong></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;

sr = 48000
ksmps = 32
nchnls = 1
0dbfs = 1

instr 1   ; Ring-Modulation (no DC-Offset)
aSine1 poscil 0.3, 200, 2 ; -&gt; [200, 400, 600] Hz
aSine2 poscil 0.3, 600, 1
out aSine1*aSine2
endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f 1 0 1024 10 1 ; sine
f 2 0 1024 10 1 1 1; 3 harmonics
i 1 0 5
e
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
; written by Alex Hofmann (Mar. 2011)
</pre>
<p>Using an inharmonic modulator frequency also makes the result
sound inharmonic. Varying the DC-offset makes the sound-spectrum
evolve over time.<br/>
Modulator freqs: [230, 460, 690]<br/>
Resulting freqs:  [ (-)90, 140, 370, &lt;-600-&gt;, 830, 1060,
1290]<br/>
(negative frequencies become mirrored, but phase inverted)</p>
<p><strong><em>EXAMPLE 04C04_Evolving_AM.csd</em></strong></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;

sr = 48000
ksmps = 32
nchnls = 1
0dbfs = 1

instr 1   ; Amplitude-Modulation
aOffset linseg 0, 1, 0, 5, 1, 3, 0
aSine1 poscil 0.3, 230, 2 ; -&gt; [230, 460, 690] Hz
aSine2 poscil 0.3, 600, 1
out (aSine1+aOffset)*aSine2
endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f 1 0 1024 10 1 ; sine
f 2 0 1024 10 1 1 1; 3 harmonics
i 1 0 10
e
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
</pre>
</body>
</html>
