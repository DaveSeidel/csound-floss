<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" epub:prefix="z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en" xml:lang="en">
  <head>
    <title>D. FREQUENCY MODULATION</title>
  </head>
  <body><h1>D. FREQUENCY MODULATION</h1>
<h2 style="">Basic Model</h2>
<p>In FM synthesis, the frequency of one oscillator (called the  carrier) is modulated by the signal from another oscillator (called the  modulator). The output of the modulating oscillator is added to the  frequency input of the carrier oscillator.</p><div class="group_img image-layout-1image_1caption_bottom" style="text-align: start;"><div class="image bk-image-editor" style="width: 450px; height: 530px;"><img style="width: 450px; height: 530px; transform: translate(0px, 0px) rotate(0deg) scaleX(1) scaleY(1); filter: contrast(100%) brightness(100%) blur(0px) opacity(100%) saturate(100%);" src="static/fm_191009.png" alt="" transform-data="{&quot;imageWidth&quot;:450.0004493597206,&quot;imageHeight&quot;:529.999809080326,&quot;imageTranslateX&quot;:0,&quot;imageTranslateY&quot;:0,&quot;imageScaleX&quot;:1,&quot;imageScaleY&quot;:1,&quot;imageRotateDegree&quot;:0,&quot;imageContrast&quot;:100,&quot;imageBrightness&quot;:100,&quot;imageBlur&quot;:0,&quot;imageSaturate&quot;:100,&quot;imageOpacity&quot;:100,&quot;frameWidth&quot;:450.0004493597206,&quot;frameHeight&quot;:529.999809080326,&quot;frameFPI&quot;:false,&quot;editorWidth&quot;:898}"/></div><div class="caption_small" style="width: 450px;">Basic Model of Frequency Modulation</div></div><div class="group_img image-layout-1image_1caption_bottom" style="text-align: start;"><div class="caption_small"><br/></div></div>The  amplitude of the modulator determines the amount of modulation, or the  frequency deviation from the fundamental carrier frequency. The  frequency of the modulator determines how frequent the deviation will  occur in one second. The amplitude of the modulator determines the  amount of the deviation. An amplitude of 1 will alter the carrier  frequency by +-1 Hz, wheras an amplitude of 10 will alter the carrier  frequency by +-10 Hz. If the amplitude of the modulating signal is zero,  there is no modulation and the output from the carrier oscillator is  simply a sine wave with the frequency of the carrier. When modulation  occurs, the signal from the modulation oscillator, a sine wave with  frequency ModFreq, drives the frequency of the carrier oscillator both  above and below the carrier frequency CarFreq. If the modulator is  running in the sub-audio frequency range (below 20 Hz), the result of FM  is vibrato. When the modulator’s frequency rises in the audio range, we  hear it as a change in the timbre of the carrier.<p style=""><br/></p><p style=""><em><b>EXAMPLE 04D01_Frequency_modulation.csd</b></em></p><pre style="">&lt;CsoundSynthesizer&gt;<br/>&lt;CsOptions&gt;<br/>-o dac<br/>&lt;/CsOptions&gt;<br/>&lt;CsInstruments&gt;<br/><br/>sr = 44100<br/>ksmps = 32<br/>nchnls = 2<br/>0dbfs = 1<br/><br/>instr FM_vibr ;vibrato as an FM result when the modulator is in the sub-audio range<br/> kModFreq randomi 5, 10, 1<br/> kCarAmp linen 0.5, 0.1, p3, 0.5<br/> aModulator poscil 20, kModFreq <br/> aCarrier poscil kCarAmp, 400 + aModulator <br/> out aCarrier, aCarrier<br/>endin<br/><br/>instr FM_timbr ;timbre change when the modulator’s frequency is in the audio range<br/> kModAmp linseg 0, p3/2, 212, p3/2, 50<br/> kModFreq line 25, p3, 300<br/> kCarAmp linen 0.5, 0.1, p3, 0.5<br/> aModulator poscil kModAmp, kModFreq<br/> aCarrier poscil kCarAmp, 400 + aModulator<br/> out aCarrier, aCarrier<br/>endin<br/><br/>&lt;/CsInstruments&gt;<br/>&lt;CsScore&gt;<br/>i "FM_vibr" 0 10<br/>i "FM_timbr" 10 10<br/>&lt;/CsScore&gt;<br/>&lt;/CsoundSynthesizer&gt;<br/>;example by marijana janevska</pre><h2>Carrier/Modulator Ratio</h2><p>The  position of the frequency components generated by FM depends on the  relationship of the carrier frequency to the modulating frequency  CarFreq/ModFreq. This is called the ratio. When CarFreq/ModFreq is a  simple integer ratio, such as 4:1 (as in the case of two signals at 400  and 100 Hz), FM generates harmonic spectra, that is sidebands that are  integer multiplies of the carrier and modulating frequencies. When  CarFreq/ModFreq is not a simple integer ratio, such as 8:2.1 (as in the  case of two signals at 800 and 210 Hz), FM generates inharmonic spectra  (noninteger multiplies of the carrier and modulator).</p><p style=""><br/></p><p style=""><em><b>EXAMPLE 04D02_Ratio.csd</b></em></p><pre style="">&lt;CsoundSynthesizer&gt;<br/>&lt;CsOptions&gt;<br/>-o dac<br/>&lt;/CsOptions&gt;<br/>&lt;CsInstruments&gt;<br/><br/>sr = 44100<br/>ksmps = 32<br/>nchnls = 2<br/>0dbfs = 1<br/><br/>instr Ratio<br/> kRatio = p4<br/> kCarFreq = 400<br/> kModFreq = kCarFreq/kRatio<br/> aModulator poscil 500, kModFreq<br/> aCarrier poscil 0.3, kCarFreq + aModulator<br/> aOut linen aCarrier, .1, p3, 1<br/> out aOut, aOut<br/>endin<br/><br/>&lt;/CsInstruments&gt;<br/>&lt;CsScore&gt;<br/>i 1 0 5 2<br/>i . + . 2.1<br/>&lt;/CsScore&gt;<br/>&lt;/CsoundSynthesizer&gt;<br/>;example written by marijana janevska</pre><h2>Index of Modulation</h2><p class="">FM  of two sinusoids generates a series of sidebands around the carrier  frequency (CarFreq). Each sideband spreads out at a distance equal to a  multiple of the modulating amplitude (ModAmp).</p><p class="aloha-empty-paragraph" style=""/><div class="group_img" style="text-align: start;"><div class="image bk-image-editor" style="width: 656.512px; height: 312.575px;"><img style="width: 656.512px; height: 312.575px; transform: translate(0px, 0px) rotate(0deg) scaleX(1) scaleY(1); filter: contrast(100%) brightness(100%) blur(0px) opacity(100%) saturate(100%);" src="static/fm_2pic.png" alt="" transform-data="{&quot;imageWidth&quot;:656.512223515716,&quot;imageHeight&quot;:312.5750873108265,&quot;imageTranslateX&quot;:0,&quot;imageTranslateY&quot;:0,&quot;imageScaleX&quot;:1,&quot;imageScaleY&quot;:1,&quot;imageRotateDegree&quot;:0,&quot;imageContrast&quot;:100,&quot;imageBrightness&quot;:100,&quot;imageBlur&quot;:0,&quot;imageSaturate&quot;:100,&quot;imageOpacity&quot;:100,&quot;frameWidth&quot;:656.512223515716,&quot;frameHeight&quot;:312.5750873108265,&quot;frameFPI&quot;:false,&quot;editorWidth&quot;:898}"/></div></div><p>The bandwidth of the FM spectrum (the number of sidebands) is controlled by the index of modulation (<b>I)</b>. The Index is defined mathematically according to the following relation:</p><p><br/></p><p class="" style=""> I = ModAmp/ModFreq</p><p class="" style=""><br/></p><p class="" style="">where  ModAmp is the amount of frequency deviation (in Hz) from the carrier  frequency. Hence, ModAmp is a way of expressing the depth or amount of  modulation. The amplitude of each sideband depends on the index of  modulation. When there is no modulation, the index of modulation is zero  and all the signal power resides in the carrier frequency. Increasing  the value of the index causes the sidebands to acquire more power at the  expense of the power of the carrier frequency. The wider the deviation,  the more widely distributed is the power among the sidebands and the  greater the number of sidebands that have significant amplitudes. The  number of significant sideband pairs (those that are more than 1/100 the  amplitude of the carrier) is approximately I+1. For certain values of  the carrier and modulator frequencies and Index, extreme sidebands  reflect out of the upper and lower ends of the spectrum, causing audible  side effects. When the lower sidebands extend below 0 Hz, they reflect  back into the spectrum in 180 degree phase inverted form. Negative  frequency components add richness to the lower frequency portion of the  spectrum, but if negative components overlap exactly with positive  components, they can cancel each other. In simple FM, both oscillators  use sine waves as their source waveform, although any waveform can be  used. The FM can produce such rich spectra, that, when one waveform with  a large number of spectral components frequency modulates another, the  resulting sound can be so dense that it sounds harsh and undefined.  Aliasing can occur easily.</p><p class="" style=""><br/></p><p style=""><em><b>EXAMPLE 04D03_Index.csd</b></em></p><pre style="">&lt;CsoundSynthesizer&gt;<br/>&lt;CsOptions&gt;<br/>-o dac<br/>&lt;/CsOptions&gt;<br/>&lt;CsInstruments&gt;<br/><br/>sr = 44100<br/>ksmps = 32<br/>nchnls = 2<br/>0dbfs = 1<br/><br/>instr Rising_index<br/> ModAmp = 400<br/> kIndex linseg 3, p3, 8<br/> kModFreq = kModAmp/kIndex <br/> aModulator poscil kModAmp, kModFreq<br/> aCarrier poscil 0.3, 400 + aModulator<br/> aOut linen aCarrier, .1, p3, 1 <br/> out aOut, aOut<br/>endin<br/><br/>&lt;/CsInstruments&gt;<br/>&lt;CsScore&gt;<br/>i "Rising_index" 0 10<br/>&lt;/CsScore&gt;<br/>&lt;/CsoundSynthesizer&gt;<br/>;example by marijana janevska and joachim heintz</pre><h2 style="">Standard FM with Ratio and Index<br/></h2><p>In  the basic FM model three variables are given: the frequency of the  carrier (CarFreq or simply C), the frequency of the modulator (ModFreq  or simply M) and the amplitude of the modulator which results in the  frequency deviation (so ModAmp or D). By introducing the Ratio (C/M) and  the Index (D/M) as musically meaningful values, it makes sense to  transform the previous C, M and D input to C, R and I. C yields the base  (or perhaps better: middle) frequency of the sound, R yields the  overall characteristic of the timbre, I yields the emergence of the side  bands. The three musically meaningful input values can easily be  transformed into the basic model:</p><p>if R = C / M then M = C / R and</p><p>if I = D / M then D = I · M.</p><p style=""><br/></p><p><em><b>EXAMPLE 04D04_Standard.csd</b></em></p><pre style="">&lt;CsoundSynthesizer&gt;<br/>&lt;CsOptions&gt;<br/>-odac  -m128<br/>&lt;/CsOptions&gt;<br/>&lt;CsInstruments&gt;<br/><br/>sr = 44100<br/>ksmps = 32<br/>nchnls = 2<br/>0dbfs = 1<br/><br/>instr Standard<br/><br/>//input<br/> iC = 400<br/> iR = p4 ;ratio<br/> iI = p5 ;index<br/> prints "Ration = %.3f, Index = %.3f\n", iR, iI<br/><br/> //transform<br/> iM = iC / iR<br/> iD = iI * iM<br/><br/> //apply to standard model<br/> aModulator poscil iD, iM<br/> aCarrier poscil 0.3, iC + aModulator<br/> aOut linen aCarrier, .1, p3, 1<br/> out aOut, aOut<br/><br/>endin<br/><br/>instr PlayMess<br/> <br/> kC randomi 300, 500, 1, 2, 400<br/> kR randomi 1, 2, 2, 3<br/> kI randomi 1, 5, randomi:k(3,10,1,3), 3<br/> <br/> //transform<br/> kM = kC / kR<br/> kD = kI * kM<br/><br/> //apply to standard model<br/> aModulator poscil kD, kM<br/> aCarrier poscil ampdb(port:k(kI*5-30,.1)), kC + aModulator<br/> aOut linen aCarrier, .1, p3, p3/10<br/> out aOut, aOut<br/><br/>endin<br/><br/>&lt;/CsInstruments&gt;<br/>&lt;CsScore&gt;<br/>//changing the ratio at constant index=3<br/>i "Standard" 0 3 1 3<br/>i . + . 1.41 .<br/>i . + . 1.75 .<br/>i . + . 2.07 .<br/>s<br/>//changing the index at constant ratio=3.3<br/>i "Standard" 0 3 3.3 0<br/>i . + . . 1<br/>i . + . . 5<br/>i . + . . 10<br/>s<br/>//let some nonsense happen<br/>i "PlayMess" 0 30<br/>&lt;/CsScore&gt;<br/>&lt;/CsoundSynthesizer&gt;<br/>;example by joachim heintz</pre><h2 style=""><br/></h2><hr/><p style="">____________________________________<br/></p>
<h2>The John Chowning FM Model of a Trumpet</h2>
<p>Composer and researcher Jown Chowning worked on the first
digital implementation of FM in the 1970's.</p>
<p>Using envelopes to control the <em>modulation index</em> and the
overall amplitude gives you the possibility to create evolving
sounds with enormous spectral variations. Chowning showed these
possibilities in his pieces, where he let the sounds transform. In
the piece <em>Sabelithe</em> a drum sound morphes over the time
into a trumpet tone.</p>
<p><strong><em>EXAMPLE 04D05_Trumpet_FM.csd</em></strong> </p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
sr = 48000
ksmps = 32
nchnls = 2
0dbfs = 1

instr 1  ; simple way to generate a trumpet-like sound
kCarFreq = 440
kModFreq = 440
kIndex = 5
kIndexM = 0
kMaxDev = kIndex*kModFreq
kMinDev = kIndexM * kModFreq
kVarDev = kMaxDev-kMinDev
aEnv expseg .001, 0.2, 1, p3-0.3, 1, 0.2, 0.001
aModAmp = kMinDev+kVarDev*aEnv
aModulator poscil aModAmp, kModFreq, 1
aCarrier poscil 0.3*aEnv, kCarFreq+aModulator, 1
outs aCarrier, aCarrier
endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f 1 0 1024 10 1                 ;Sine wave for table 1
i 1 0 2
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
; written by Alex Hofmann (Mar. 2011)
</pre>
<p> </p>
<p>The following example uses the same instrument, with different
settings to generate a bell-like sound:</p>
<p><strong><em>EXAMPLE 04D06_Bell_FM.csd</em></strong></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
sr = 48000
ksmps = 32
nchnls = 2
0dbfs = 1

instr 1  ; bell-like sound
kCarFreq = 200  ; 200/280 = 5:7 -&gt; inharmonic spectrum
kModFreq = 280
kIndex = 12
kIndexM = 0
kMaxDev = kIndex*kModFreq
kMinDev = kIndexM * kModFreq
kVarDev = kMaxDev-kMinDev
aEnv expseg .001, 0.001, 1, 0.3, 0.5, 8.5, .001
aModAmp = kMinDev+kVarDev*aEnv
aModulator poscil aModAmp, kModFreq, 1
aCarrier poscil 0.3*aEnv, kCarFreq+aModulator, 1
outs aCarrier, aCarrier
endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f 1 0 1024 10 1                 ;Sine wave for table 1
i 1 0 9
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
; written by Alex Hofmann (Mar. 2011)

</pre>
<h2>More Complex FM Algorithms</h2>
<p>Combining more than two oscillators (operators) is called
complex FM synthesis. Operators can be connected in different
combinations; often 4-6 operators are used. The carrier is always
the last operator in the row. Changing it's pitch shifts the whole
sound. All other operators are modulators, changing their pitch
alters the sound-spectrum.</p>
<h4>Two into One: M1+M2 -&gt; C</h4>
<p>The principle here is, that (M1:C) and (M2:C) will be separate
modulations and later added together. </p>
<p><strong><em>EXAMPLE 04D07_Added_FM.csd</em></strong> </p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
sr = 48000
ksmps = 32
nchnls = 2
0dbfs = 1

instr 1
aMod1 poscil 200, 700, 1
aMod2 poscil 1800, 290, 1
aSig poscil 0.3, 440+aMod1+aMod2, 1
outs aSig, aSig
endin


&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f 1 0 1024 10 1                 ;Sine wave for table 1
i 1 0 3
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
; written by Alex Hofmann (Mar. 2011)
</pre>
<h4>In series: M1-&gt;M2-&gt;C</h4>
<p>This is much more complicated to calculate and sound-timbre
becomes harder to predict, because M1:M2 produces a complex
spectrum (W), which then modulates the carrier (W:C).</p>
<p><strong><em>EXAMPLE 04D08_Serial_FM.csd</em></strong> </p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
sr = 48000
ksmps = 32
nchnls = 2
0dbfs = 1

instr 1
aMod1 poscil 200, 700, 1
aMod2 poscil 1800, 290+aMod1, 1
aSig poscil 0.3, 440+aMod2, 1
outs aSig, aSig
endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f 1 0 1024 10 1                 ;Sine wave for table 1
i 1 0 3
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
; written by Alex Hofmann (Mar. 2011)
</pre>
<p> </p>
<h2>Phase Modulation - the Yamaha DX7 and Feedback FM</h2>
<p>There is a strong relation between frequency modulation and
phase modulation, as both techniques influence the oscillator's
pitch, and the resulting timbre modifications are the same.</p>
<p>If you'd like to build a feedbacking FM system, it will happen
that the self-modulation comes to a zero point, which stops the
oscillator forever. To avoid this, it is more practical to modulate
the carriers table-lookup phase, instead of its pitch.</p>
<p>Even the most famous FM-synthesizer Yamaha DX7 is based on the
phase-modulation (PM) technique, because this allows feedback. The
DX7 provides 7 operators, and offers 32 routing combinations of
these. (http://yala.freeservers.com/t2synths.htm#DX7)</p>
<p>To build a PM-synth in Csound <em><span>tablei</span></em>
opcode needs to be used as oscillator. In order to step through the
f-table, a <span><em>phasor</em></span> will output the necessary
steps.</p>
<p><strong><em>EXAMPLE 04D09_PhaseMod.csd</em></strong> </p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
sr = 48000
ksmps = 32
nchnls = 2
0dbfs = 1

instr 1  ; simple PM-Synth
kCarFreq = 200
kModFreq = 280
kModFactor = kCarFreq/kModFreq
kIndex = 12/6.28   ;  12/2pi to convert from radians to norm. table index
aEnv expseg .001, 0.001, 1, 0.3, 0.5, 8.5, .001
aModulator poscil kIndex*aEnv, kModFreq, 1
aPhase phasor kCarFreq
aCarrier tablei aPhase+aModulator, 1, 1, 0, 1
outs (aCarrier*aEnv), (aCarrier*aEnv)
endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f 1 0 1024 10 1                 ;Sine wave for table 1
i 1 0 9
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
; written by Alex Hofmann (Mar. 2011)
</pre>
<p>Let's use the possibilities of self-modulation
(feedback-modulation) of the oscillator. So in the following
example, the oscillator is both <em>modulator</em> and
<em>carrier</em>. To control the amount of modulation, an envelope
scales the feedback.</p>
<p><strong><em>EXAMPLE
04D10_Feedback_modulation.csd</em></strong></p>
<pre style="">&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o dac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
sr = 48000
ksmps = 32
nchnls = 2
0dbfs = 1

instr 1  ; feedback PM
kCarFreq = 200
kFeedbackAmountEnv linseg 0, 2, 0.2, 0.1, 0.3, 0.8, 0.2, 1.5, 0
aAmpEnv expseg .001, 0.001, 1, 0.3, 0.5, 8.5, .001
aPhase phasor kCarFreq
aCarrier init 0 ; init for feedback
aCarrier tablei aPhase+(aCarrier*kFeedbackAmountEnv), 1, 1, 0, 1
outs aCarrier*aAmpEnv, aCarrier*aAmpEnv
endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
f 1 0 1024 10 1                 ;Sine wave for table 1
i 1 0 9
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
; written by Alex Hofmann (Mar. 2011)<br/></pre><p style=""><br/></p><p style=""><br/></p><br/><div class="group_img" style="text-align: start;"><div class="image bk-image-editor" style="width: 656.231px; height: 312.938px;"><img style="width: 656.231px; height: 312.938px; transform: translate(0px, 0px) rotate(0deg) scaleX(1) scaleY(1); filter: contrast(100%) brightness(100%) blur(0px) opacity(100%) saturate(100%);" src="static/fm_2pic.png" alt="" transform-data="{&quot;imageWidth&quot;:656.2310104772992,&quot;imageHeight&quot;:312.93784167636784,&quot;imageTranslateX&quot;:0,&quot;imageTranslateY&quot;:0,&quot;imageScaleX&quot;:1,&quot;imageScaleY&quot;:1,&quot;imageRotateDegree&quot;:0,&quot;imageContrast&quot;:100,&quot;imageBrightness&quot;:100,&quot;imageBlur&quot;:0,&quot;imageSaturate&quot;:100,&quot;imageOpacity&quot;:100,&quot;frameWidth&quot;:656.2310104772992,&quot;frameHeight&quot;:312.93784167636784,&quot;frameFPI&quot;:false,&quot;editorWidth&quot;:898}"/></div></div><h2>Multiple carriers (MC FM)</h2><p class="" style="">By multiple carrier frequency modulation, we mean an FM instrument in which one oscillator simultaneously modulates two or more carrier oscillators.</p><p class="" style=""><br/></p><p class="" style=""><em><b>EXAMPLE 04D15_Multiple_Carrier_FM.csd</b></em><br/></p><pre style="">&lt;CsoundSynthesizer&gt;<br/>&lt;CsOptions&gt;<br/>&lt;/CsOptions&gt;<br/>&lt;CsInstruments&gt;<br/><br/>sr = 44100<br/>ksmps = 32<br/>nchnls = 2<br/>0dbfs = 1<br/><br/>instr 1 ; FM with two carriers<br/><br/>aModulator poscil 100, 14<br/>aCarrier1 poscil 0.3, 700 + aModulator<br/>aCarrier2 poscil 0.1, 701 + aModulator<br/>outs aCarrier1+aCarrier2, aCarrier1+aCarrier2<br/> <br/>endin<br/><br/>&lt;/CsInstruments&gt;<br/>&lt;CsScore&gt;<br/><br/>i1 0 10<br/><br/>&lt;/CsScore&gt;<br/>&lt;/CsoundSynthesizer&gt;<br/></pre><h2>Multiple modulators (MM FM)</h2><p style="">In multiple modulator frequency modulation, more than one oscillator modulates a single carrier oscillator. Two basic configurations are possible: parallel and series. In parallel MM FM, two sinewaves simultaneously modulate a single carrier oscillator.</p><p style="">In series MM FM, the output of the first modulator is added to the second modulator, which then is applied to the frequency input of the carrier.</p><p style=""><br/></p><p style=""><em><b>EXAMPLE 04D16_Multiple_Modulator_FM.csd</b></em><br/></p><pre style="">&lt;CsoundSynthesizer&gt;<br/>&lt;CsOptions&gt;<br/>-odac -d<br/>&lt;/CsOptions&gt;<br/>&lt;CsInstruments&gt;<br/><br/>sr = 44100<br/>ksmps = 32<br/>nchnls = 2<br/>0dbfs = 1<br/><br/>instr 1 ; parallel FM with two modulators<br/><br/>aModulator1 poscil 100, 80<br/>aModulator2 poscil 20, 3<br/>aCarrier poscil 0.3, 400 + aModulator1 + aModulator2<br/>outs aCarrier, aCarrier<br/><br/>endin<br/><br/>instr 2 ; series FM with two modulators<br/><br/>aModulator2 poscil 100, 1/10<br/>aModulator1 poscil 20, 3 + aModulator2<br/>aCarrier poscil 0.3, 400 + aModulator1<br/>outs aCarrier, aCarrier<br/><br/>endin<br/><br/>&lt;/CsInstruments&gt;<br/>&lt;CsScore&gt;<br/><br/>i1 0 80<br/>;i2 0 80<br/><br/>&lt;/CsScore&gt;<br/>&lt;/CsoundSynthesizer&gt;<br/></pre><p style="">When one carrier and one modulator is used, the FM synthesis can also be implemented by using the foscil code. This opcode models a pair of oscillators configured as a carrier and a modulator, producing a single output signal from the carrier.</p><p style=""><em><b>EXAMPLE 04D17_FM_with_Foscil.csd</b></em></p><pre style="">&lt;CsoundSynthesizer&gt;<br/>&lt;CsOptions&gt;<br/>&lt;/CsOptions&gt;<br/>&lt;CsInstruments&gt;<br/><br/>sr = 44100<br/>ksmps = 32<br/>nchnls = 2<br/>0dbfs = 1<br/><br/>giSine ftgen 0, 0, 8192, 10, 1<br/><br/>instr 1 <br/><br/>aCarMod foscil 0.3, 110, 1, 2, 5, giSine<br/>outs aCarMod, aCarMod<br/><br/>endin<br/><br/>&lt;/CsInstruments&gt;<br/>&lt;CsScore&gt;<br/><br/>i1 0 99<br/><br/>&lt;/CsScore&gt;<br/>&lt;/CsoundSynthesizer&gt;<br/><br/></pre>
</body>
</html>
