<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" epub:prefix="z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en" xml:lang="en">
  <head>
    <title>E. RENDERING TO FILE</title>
  </head>
  <body><h1>E. RENDERING TO FILE</h1><h2>When to Render to File</h2>
<p>Csound can also render audio straight to a sound file stored on
your hard drive instead of as live audio sent to the audio
hardware. This gives you the possibility to hear the results of
very complex processes which your computer can't produce in
realtime. Or you want to render something in Csound to import it in
an audio editor, or as the final result of a 'tape' piece.<sup data-id="56dfd72d-0334-4e60-9fe3-fdf52fec7d10" class="endnote">1</sup> </p>
<p>Csound can render to formats like wav, aiff or ogg (and other
less popular ones), but not mp3 due to its patent and licencing
problems.</p>
<h2>Rendering to File</h2>
<p>Save the following code as Render.csd:</p>
<p>   <em><strong>EXAMPLE
02E01_Render.csd</strong></em> </p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-o Render.wav
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
;Example by Alex Hofmann
instr 1
aSin      poscil    0dbfs/4, 440
          out       aSin
endin
&lt;/CsInstruments&gt;
&lt;CsScore&gt;
i 1 0 1
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;</pre>
<p>Open the Terminal / Prompt / Console and type:</p>
<pre>csound /path/to/Render.csd
</pre>
<p>Now, because you changed the <strong>-o</strong> flag in the
&lt;CsOptions&gt; from "-o dac" to "-o <em>filename</em>", the
audio output is no longer written in realtime to your audio device,
but instead to a file. The file will be rendered to the default
directory (usually the user home directory). This file can be
opened and played in any audio player or editor, e.g. Audacity.</p>
<p>The <strong>-o</strong> flag can also be used to write the
output file to a certain directory. Something like this for Windows
...</p>
<pre>&lt;CsOptions&gt;
-o c:/music/samples/Render.wav
&lt;/CsOptions&gt;</pre>
<p>... and this for Linux or Mac OSX:</p>
<pre>&lt;CsOptions&gt;
-o /Users/JSB/organ/tatata.wav
&lt;/CsOptions&gt;  
</pre>
<h3>Rendering Options</h3>
<p>The internal rendering of audio data in Csound is done with
64-bit floating point numbers. Depending on your needs, you should
decide the precision of your rendered output file:</p>
<ul>
<li>If you want to render 32-bit floats, use the option flag
<strong>-f</strong>.</li>
<li>If you want to render 24-bit, use the flag <strong>-3</strong>
(= 3 bytes).</li>
<li>If you want to render 16-bit, use the flag <strong>-s</strong>
(or nothing, because this is also the default in Csound).</li>
</ul>
<p>For making sure that the header of your soundfile will be
written correctly, you should use the <strong>-W</strong> flag for
a WAV file, or the <strong>-A</strong> flag for a AIFF file. So
these options will render the file "Wow.wav" as WAV file with
24-bit accuracy:</p>
<pre>&lt;CsOptions&gt;
-o Wow.wav -W -3
&lt;/CsOptions&gt;  
</pre>
<h3>Realtime and Render-To-File at the Same Time</h3>
<p>Sometimes you may want to simultaneously have realtime output
and file rendering to disk, like recording your live performance.
This can be achieved by using the <a title="A. DIGITAL AUDIO" href="http://www.csounds.com/manual/html/fout.html">fout</a> opcode. You
just have to specify your output file name. File type and format
are given by a number, for instance 18 specifies "wav 24 bit" (see
the manual page for more information). The following example
creates a random frequency and panning movement of a sine wave, and
writes it to the file "live_record.wav" (in the same directory as
your .csd file):</p>
<p>   <em><strong>EXAMPLE
02E02_RecordRT.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-odac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
;Example by Joachim Heintz
sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

          seed      0 ;each time different seed for random

  instr 1
kFreq     randomi   400, 800, 1 ;random sliding frequency
aSig      poscil    .2, kFreq ;sine with this frequency
kPan      randomi   0, 1, 1 ;random panning
aL, aR    pan2      aSig, kPan ;stereo output signal
          outs      aL, aR ;live output
          fout      "live_record.wav", 18, aL, aR ;write to soundfile
  endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
i 1 0 10
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt; </pre>
<ol class="endnotes">
<li id="endnote-56dfd72d-0334-4e60-9fe3-fdf52fec7d10">or bit-depth, see the section about
Bit-depth Resolution in chapter 01A (Digital Audio)</li></ol>
</body>
</html>
