<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" epub:prefix="z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en" xml:lang="en">
  <head>
    <title>A. RECEIVING EVENTS BY MIDIIN</title>
  </head>
  <body><h1>A. RECEIVING EVENTS BY MIDIIN</h1><p>Csound provides a variety of opcodes, such as <a title="cpsmidi" href="http://www.csounds.com/manual/html/cpsmidi.html" target="_blank">cpsmidi</a>, <a title="ampmidi" href="http://www.csounds.com/manual/html/ampmidi.html" target="_blank">ampmidi</a> and <a title="ctrl7" href="http://www.csounds.com/manual/html/ctrl7.html" target="_blank">ctrl7</a>, which facilitate the reading of incoming midi
data into Csound with minimal fuss. These opcodes allow us to read
in midi information without us having to worry about parsing status
bytes and so on. Occasionally though when more complex midi
interaction is required, it might be advantageous for us to scan
all raw midi information that is coming into Csound. The <a title="midiin" href="file:///C:/Program%20Files/Csound/doc/manual/midiin.html" target="_blank">midiin</a> opcode allows us to do this.</p>
<p>In the next example a simple midi monitor is constructed.
Incoming midi events are printed to the terminal with some
formatting to make them readable. We can disable Csound's default
instrument triggering mechanism (which in this example we don't
want to use) by writing the line:</p>
<pre>massign 0,0 </pre>
<p>just after the header statement (sometimes referred to as
instrument 0).</p>
<p>For this example to work you will need to ensure that you have
activated live midi input within Csound, either by using the
<a href="http://www.csounds.com/manual/html/CommandFlagsCategory.html#FlagsCatMinusUpperM">
-M flag</a> or from within the QuteCsound configuration menu. You
will also need to make sure that you have a midi keyboard or
controller connected. You may also want to include the <a href="http://www.csounds.com/manual/html/CommandFlags.html#FlagsMinusLowerM">
-m0 flag</a> which will disable some of Csound's additional
messaging output and therefore allow our midi printout to be
presented more clearly.</p>
<p>The status byte tells us what sort of midi information has been
received. For example, a value of 144 tells us that a midi note
event has been received, a value of 176 tells us that a midi
controller event has been received, a value of 224 tells us that
pitch bend has been received and so on.</p>
<p>The meaning of the two data bytes depends on what sort of status
byte has been received. For example if a midi note event has been
received then data byte 1 gives us the note velocity and data byte
2 gives us the note number. If a midi controller event has been
received then data byte 1 gives us the controller number and data
byte 2 gives us the controller value. </p>
<p><strong>   <em>EXAMPLE
07A01_midiin_print.csd</em></strong></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-Ma -m0
; activates all midi devices, suppress note printings
&lt;/CsOptions&gt;

&lt;CsInstruments&gt;
; Example by Iain McCurdy

; no audio so 'sr' or 'nchnls' aren't relevant
ksmps = 32

; using massign with these arguments disables default instrument triggering
massign 0,0

  instr 1
kstatus, kchan, kdata1, kdata2  midiin            ;read in midi
ktrigger  changed  kstatus, kchan, kdata1, kdata2 ;trigger if midi data changes
 if ktrigger=1 &amp;&amp; kstatus!=0 then          ;if status byte is non-zero...
; -- print midi data to the terminal with formatting --
 printks "status:%d%tchannel:%d%tdata1:%d%tdata2:%d%n"\
                                    ,0,kstatus,kchan,kdata1,kdata2
 endif
  endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
i 1 0 3600 ; instr 1 plays for 1 hour
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;</pre>
<p>The principle advantage of using the <em>midiin</em> opcode is
that, unlike opcodes such as <em>cpsmidi</em>, <em>ampmidi</em> and
<em>ctrl7</em> which only receive specific midi data types on a
specific channel, <em>midiin</em> 'listens' to all incoming
data including system exclusive messages. In situations where
elaborate Csound instrument triggering mappings that are beyond the
capabilities of the default triggering mechanism are required, then
the use of <em>midiin</em> might be beneficial.</p>
</body>
</html>
