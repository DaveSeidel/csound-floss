<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" epub:prefix="z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en" xml:lang="en">
  <head>
    <title>C. CONFIGURING MIDI</title>
  </head>
  <body><h1>C. CONFIGURING MIDI</h1><p>Csound can receive MIDI events (like MIDI notes and MIDI control
changes) from an external MIDI interface or from another program
via a virtual MIDI cable. This information can be used to control
any aspect of synthesis or performance.</p>
<p>Most frontends are using their own MIDI handler. See the
chapters about <a title="BLUE" href="csoundqt">CsoundQt</a>,
<a title="BLUE" href="cabbage">Cabbage</a> and <a title="BLUE" href="blue">Blue</a> in this manual, or have a look at the built-in
documentation of these environments. The following description is
only relevant when you use Csound's own MIDI handlers, for instance
when running Csound via Command Line.</p>
<p>Csound receives MIDI data through MIDI Realtime Modules. These
are special Csound plugins which enable MIDI input using different
methods according to a specific platform. They are enabled using
the <em>-+rtmidi</em> <a title="BLUE" href="http://csound.github.io/docs/manual/html/CommandFlagsCategory.html">
command line flag</a> in the <em>&lt;CsOptions&gt;</em> section of
your .csd file.</p>
<p>There is the universal "portmidi" module. <a title="BLUE" href="http://portmedia.sourceforge.net/">PortMidi</a> is a
cross-platform module for MIDI I/O and should be available on all
platforms. To enable the "portmidi" module, use the flag
(option):</p>
<pre>-+rtmidi=portmidi
</pre>
<p>After selecting the RT MIDI module from a front-end or the
command line, you need to select the MIDI devices for input and
output. These are set using the flags -M and -Q respectively
followed by the number of the interface. You can usually use:</p>
<pre>-M999</pre>
<p>To get a performance error with a listing of available
interfaces.</p>
<p>For the PortMidi module (and others like ALSA), you can specify
no number to use the default MIDI interface or the 'a' character to
use <strong>all</strong> devices (which is actually the most common
case). This will even work when no MIDI devices are present.</p>
<pre>-Ma</pre>
<p>So if you want MIDI input using the portmidi module, using
device 2 for input and device 1 for output, your
<em>&lt;CsOptions&gt;</em> section should contain:</p>
<pre>-+rtmidi=portmidi -M2 -Q1</pre>
<p>There is a special "virtual" RT MIDI module which enables MIDI
input from a <a title="BLUE" href="http://csound.github.io/docs/manual/html/MidiTop.html#MidiVirtual">
virtual keyboard</a>. To enable it, you can use:</p>
<pre> -+rtmidi=virtual -M0
</pre>
<h2>Platform Specific Modules</h2>
<p>If the "portmidi" module is not working properly for some
reason, you can try other platform specific modules.</p>
<h3>Linux</h3>
<p>On Linux systems, you might also have an "alsa" module to use
the alsa raw MIDI interface. This is different from the more common
alsa sequencer interface and will typically require the snd-virmidi
module to be loaded.</p>
<h3>OS X</h3>
<p>On OS X you may have a "coremidi" module available.</p>
<h3>Windows</h3>
<p>On Windows, you may have a "winmme" MIDI module.</p>
<h2>How to Use a MIDI Keyboard</h2>
<p>Once you've set up the hardware, you are ready to receive MIDI
information and interpret it in Csound. By default, when a MIDI
note is received, it turns on the Csound instrument corresponding
to its channel number, so if a note is received on channel 3, it
will turn on instrument 3, if it is received on channel 10, it will
turn on instrument 10 and so on.</p>
<p>If you want to change this routing of MIDI channels to
instruments, you can use the <a title="BLUE" href="http://csound.github.io/docs/manual/html/massign.html">massign</a>
opcode. For instance, this statement lets you route your MIDI
channel 1 to instrument 10:</p>
<pre> massign 1, 10
</pre>
<p>On the following example, a simple instrument, which plays a
sine wave, is defined in instrument 1. There are no score note
events, so no sound will be produced unless a MIDI note is received
on channel 1.</p>
<p>   <em><strong>EXAMPLE
02C01_Midi_Keybd_in.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-+rtmidi=portmidi -Ma -odac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
;Example by Andrés Cabrera

sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

        massign   0, 1 ;assign all MIDI channels to instrument 1

instr 1
iCps    cpsmidi   ;get the frequency from the key pressed
iAmp    ampmidi   0dbfs * 0.3 ;get the amplitude
aOut    poscil    iAmp, iCps ;generate a sine tone
        outs      aOut, aOut ;write it to the output
endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
</pre>
<p>Note that Csound has an unlimited polyphony in this way: each
key pressed starts a new instance of instrument 1, and you can have
any number of instrument instances at the same time.</p>
<h2>How to Use a MIDI Controller</h2>
<p>To receive MIDI controller events, opcodes like <a title="BLUE" href="http://csound.github.io/docs/manual/html/ctrl7.html">ctrl7</a> can
be used.  In the following example instrument 1 is turned on
for 60 seconds. It will receive controller #1 (modulation wheel) on
channel 1 and convert MIDI range (0-127) to a range between 220 and
440. This value is used to set the frequency of a simple sine
oscillator.</p>
<p>   <em><strong>EXAMPLE
02C02_Midi_Ctl_in.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-+rtmidi=virtual -M1 -odac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
;Example by Andrés Cabrera

sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

instr 1
; --- receive controller number 1 on channel 1 and scale from 220 to 440
kFreq ctrl7  1, 1, 220, 440
; --- use this value as varying frequency for a sine wave
aOut  poscil 0.2, kFreq
      outs   aOut, aOut
endin
&lt;/CsInstruments&gt;
&lt;CsScore&gt;
i 1 0 60
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
</pre>
<h2>Other Type of MIDI Data</h2>
<p>Csound can receive other type of MIDI, like pitch bend, and
aftertouch through the usage of specific opcodes. Generic MIDI Data
can be received using the <a title="BLUE" href="http://csound.github.io/docs/manual/html/midiin.html">midiin</a>
opcode. The example below prints to the console the data received
via MIDI.</p>
<p>   <em><strong>EXAMPLE
02C03_Midi_all_in.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-+rtmidi=portmidi -Ma -odac
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
;Example by Andrés Cabrera

sr = 44100
ksmps = 32
nchnls = 2
0dbfs = 1

instr 1
kStatus, kChan, kData1, kData2 midiin

if kStatus != 0 then ;print if any new MIDI message has been received
    printk 0, kStatus
    printk 0, kChan
    printk 0, kData1
    printk 0, kData2
endif

endin

&lt;/CsInstruments&gt;
&lt;CsScore&gt;
i1 0 3600
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
</pre>
</body>
</html>
