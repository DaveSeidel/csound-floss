<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" epub:prefix="z3998: http://www.daisy.org/z3998/2012/vocab/structure/#" lang="en" xml:lang="en">
  <head>
    <title>D. LIVE AUDIO</title>
  </head>
  <body><h1>D. LIVE AUDIO</h1><p>Similar to the MIDI configuration, the standard Csound frontends
<a title="BLUE" href="csoundqt">CsoundQt</a>, <a title="BLUE" href="cabbage">Cabbage</a> and <a title="BLUE" href="blue">Blue</a> all
provide their own way how to configure audio. The following
description is useful to understand what happens behind the
curtains, and must be regarded if you use Csound via Command
Line.</p>
<h2>Select the Audio Device</h2>
<p>Csound relates to the various inputs and outputs of sound
devices installed on your computer as a numbered list. If you wish
to send or receive audio to or from a specific audio connection you
will need to know the number by which Csound knows it. If you are
not sure of what that is you can trick Csound into providing you
with a list of available devices by trying to run Csound using an
obviously out of range device number, like this:</p>
<p>   <em><strong>EXAMPLE
02D01_GetDeviceList.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
-iadc999 -odac999
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
;Example by Andrés Cabrera
instr 1
endin
&lt;/CsInstruments&gt;
&lt;CsScore&gt;
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;
</pre>
<p>The input (-i) and output (-o) devices will be listed
seperately.<sup data-id="1137886f-aa26-44de-9359-11ae2f72c2b9" class="endnote">1</sup> 
Specify your input device with the <strong>-iadc</strong> flag and
the number of your input device, and your output device with the
<strong>-odac</strong> flag and the number of your output device.
For instance, if you select one of the devices from the list above
both, for input and output, you may include something like</p>
<pre>-iadc2 -odac3
</pre>
<p>in the &lt;CsOptions&gt; section of your .csd file.</p>
<p>If you do not specify any device number, the default device of
your system configuration will be used by Csound. So usually it is
sufficient to write:</p>
<pre>-iadc -odac</pre>
<p>If you have no real-time (microphone) input, you only need to
declare <strong>-odac</strong>. Without this option, Csound will
not produce real-time audio output, but write to an audio file as
output instead.</p>
<h2>Select the Audio Driver</h2>
<p>The RT (= real-time) output module can be set with the
<strong>-+rtaudio</strong> flag. If you don't use this flag, the
PortAudio driver will be used. Other possible drivers are jack and
alsa (Linux), mme (Windows) or CoreAudio (Mac). So, this sets your
audio driver to mme instead of Port Audio:</p>
<pre>-+rtaudio=mme
</pre>
<h2>Tuning Performance and Latency</h2>
<p>Live performance and latency depend mainly on the sizes of the
software and the hardware buffers. They can be set in the
&lt;CsOptions&gt; using the -B flag for the hardware buffer, and
the -b flag for the software buffer.<sup data-id="681cfb7f-5441-4ece-93ed-6483be6adb94" class="endnote">2</sup> 
For instance, this statement sets the hardware buffer size to 512
samples and the software buffer size to 128 sample:</p>
<pre>-B512 -b128
</pre>
<p>The other factor which affects Csound's live performance is the
<a title="BLUE" href="http://csound.github.io/docs/manual/html/ksmps.html">ksmps</a>
value which is set in the header of the &lt;CsInstruments&gt;
section. By this value, you define how many samples are processed
every Csound control cycle.</p>
<p>Try your realtime performance with -B512, -b128 and
ksmps=32.<sup data-id="4c98b6e4-e5a9-47c3-8baf-e9bfaac77f0a" class="endnote">3</sup> 
With a software buffer of 128 samples, a hardware buffer of 512 and
a sample rate of 44100 you will have around 12ms latency, which is
usable for live keyboard playing. If you have problems with either
the latency or the performance, tweak the values as described
<a title="performance tweak" href="http://csound.github.io/docs/manual/html/UsingOptimizing.html">here</a>.</p>
<h2>The "--realtime" Option</h2>
<p>When you have instruments that have substantial sections that
could block out execution, for instance with code that loads
buffers from files or creates big tables, you can try the option
<em>--realtime</em>.</p>
<p>This option will give your audio processing the priority over
other tasks to be done. It places all initialisation code on a
separate thread, and does not block the audio thread. Instruments
start performing only after all the initialisation is done. That
can have a side-effect on scheduling if your audio input and output
buffers are not small enough, because the audio processing thread
may “run ahead” of the initialisation one, taking advantage of any
slack in the buffering.</p>
<p>Given that this option is intrinsically linked to low-latency,
realtime audio performance, and also to reduce the effect on
scheduling these other tasks, it is recommended that small ksmps
and buffer sizes, for example ksmps=16, 32, or 64, -b32 or 64, and
-B256 or 512.</p>
<h2>Csound Can Produce Extreme Dynamic Range!</h2>
<p>Csound can <strong>produce extreme dynamic range</strong>, so
keep an eye on the level you are sending to your output. The number
which describes the level of 0 dB, can be set in Csound by the
<a title="BLUE" href="http://csound.github.io/docs/manual/html/Zerodbfs.html">0dbfs</a>
assignment in the &lt;CsInstruments&gt; header. There is no
limitation, if you set 0dbfs = 1 and send a value of 32000,
<strong><em>this can damage your ears and
speakers!</em></strong></p>
<h2>Using Live Audio Input and Output</h2>
<p>To process audio from an external source (for example a
microphone), use the <a title="BLUE" href="http://csound.github.io/docs/manual/html/inch.html">inch</a>
opcode to access any of the inputs of your audio input device. For
the output, <a title="BLUE" href="http://csound.github.io/docs/manual/html/outch.html">outch</a>
gives you all necessary flexibility. The following example takes a
live audio input and transforms its sound using ring modulation.
The Csound Console should output five times per second the input
amplitude level.</p>
<p>   <em><strong>EXAMPLE
02D02_LiveInput.csd</strong></em></p>
<pre>&lt;CsoundSynthesizer&gt;
&lt;CsOptions&gt;
;CHANGE YOUR INPUT AND OUTPUT DEVICE NUMBER HERE IF NECESSARY!
-iadc -odac -B512 -b128
&lt;/CsOptions&gt;
&lt;CsInstruments&gt;
;Example by Joachim Heintz
sr = 44100 ;set sample rate to 44100 Hz
ksmps = 32 ;number of samples per control cycle
nchnls = 2 ;use two audio channels
0dbfs = 1 ;set maximum level as 1

instr 1
aIn       inch      1   ;take input from channel 1
kInLev    downsamp  aIn ;convert audio input to control signal
          printk    .2, abs(kInLev)
;make modulator frequency oscillate 200 to 1000 Hz
kModFreq  poscil    400, 1/2
kModFreq  =         kModFreq+600
aMod      poscil    1, kModFreq ;modulator signal
aRM       =         aIn * aMod ;ring modulation
          outch     1, aRM, 2, aRM ;output to channel 1 and 2
endin
&lt;/CsInstruments&gt;
&lt;CsScore&gt;
i 1 0 3600
&lt;/CsScore&gt;
&lt;/CsoundSynthesizer&gt;</pre>
<p>Live Audio is frequently used with live devices like widgets or
MIDI. You will find various examples in the example collections of
your preferred frontend.</p>
<ol class="endnotes">
<li id="endnote-1137886f-aa26-44de-9359-11ae2f72c2b9">You may have to run -iadc999 and -odac999
seperately.</li><li id="endnote-681cfb7f-5441-4ece-93ed-6483be6adb94">As Victor Lazzarini explains (mail to
Joachim Heintz, 19 march 2013), the role of -b and -B varies
between the Audio Modules:
"1. For portaudio, -B is only used to suggest a latency to the
backend, whereas -b is used to set the actual buffersize.
2. For coreaudio, -B is used as the size of the internal circular
buffer, and -b is used for the actual IO buffer size.
3. For jack, -B is used to determine the number of buffers used in
conjunction with -b , num = (N + M + 1) / M. -b is the size of each
buffer.
4. For alsa, -B is the size of the buffer size, -b is the period
size (a buffer is divided into periods).
5. For pulse, -b is the actual buffersize passed to the device, -B
is not used.
In other words, -B is not too significant in 1), not used in 5),
but has a part to play in 2), 3) and 4), which is functionally
similar."</li><li id="endnote-4c98b6e4-e5a9-47c3-8baf-e9bfaac77f0a">It is always preferable to use power-of-two
values for ksmps (which is the same as "block size" in PureData or
"vector size" in Max). Just with ksmps = 1, 2, 4, 8, 16 ... you
will take advantage of the "full duplex" audio, which provides best
real time audio. Make sure your ksmps divides your buffer size with
no remainder. So, for -b 128, you can use ksmps = 128, 64, 32, 16,
8, 4, 2 or 1.</li></ol>
</body>
</html>
